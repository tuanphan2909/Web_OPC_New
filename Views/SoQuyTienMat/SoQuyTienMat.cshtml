
@{ ViewBag.Title = "SỔ QUỸ TIỀN MẶT";
    var fromDate = Request.Cookies["From_date"].Value;
    var toDate = Request.Cookies["To_date"].Value;
    var fromDateValue = DateTime.ParseExact(fromDate, "yyyy-MM-dd", CultureInfo.InvariantCulture);
    var toDateValue = DateTime.ParseExact(toDate, "yyyy-MM-dd", CultureInfo.InvariantCulture);

    var formattedFromDate = fromDateValue.ToString("dd/MM/yyyy");
    var formattedToDate = toDateValue.ToString("dd/MM/yyyy");
    var MaTK = Request.Cookies["Ma_TK"].Value;
    var MaNH = Request.Cookies["Ma_NH"].Value;
    var TenNH = "";
    var ten = "";
    var title = "";

    if (MaNH == "1605201013995" && MaTK != "1111")
    {
        TenNH = "Ngân hàng Nông nghiệp và Phát Triển VN";
    }
    else if (MaNH == "001-033554-001" && MaTK != "1111")
    {
        TenNH = "Ngân hàng TNHH MTC HSBC";
    }
    else if (MaNH == "007.137.1023892" && MaTK != "1111")
    {
        TenNH = "Ngân hàng TMCP Ngoại Thương Việt Nam";
    }
    else if (MaNH == "1012756827_VCB" && MaTK != "1111")
    {
        TenNH = "Ngân hàng TMCP Ngoại Thương Việt Nam";
    }
    else if (MaNH == "1037931581" && MaTK != "1111")
    {
        TenNH = "Ngân Hàng TMCP Công Thương Việt Nam";
    }
    else if (MaNH == "1037931581_VCB" && MaTK != "1111")
    {
        TenNH = "Ngân Hàng TMCP Ngoại Thương Việt Nam";
    }
    else if (MaNH == "111002637244_VIETIN" && MaTK != "1111")
    {
        TenNH = "Ngân hàng TMCP Công Thương Việt Nam";
    }
    else if (MaNH == "111101409003" && MaTK != "1111")
    {
        TenNH = "Ngân hàng thương mại Cổ phần Quân đội";
    }
    else if (MaNH == "116000030030" && MaTK != "1111")
    {
        TenNH = "Ngân hàng TMCP Công thương Việt Nam";
    }
    else if (MaNH == "118002874433" && MaTK != "1111")
    {
        TenNH = "Ngân hàng TMCP Công thương Việt Nam";
    }
    else if (MaNH == "118002929530" && MaTK != "1111")
    {
        TenNH = "Ngân hàng TMCP Công thương Việt Nam";
    }
    else if (MaNH == "12343939" && MaTK != "1111")
    {
        TenNH = "Ngân hàng Việt Á - Chi Nhánh Sài Gòn";
    }
    else if (MaNH == "151703359" && MaTK != "1111")
    {
        TenNH = "Ngân hàng TMCP Á Châu (ACB)";
    }
    else if (MaNH == "1605201011620" && MaTK != "1111")
    {
        TenNH = "Ngân hàng Nông nghiệp và Phát Triển VN";
    }
    else if (MaNH == "1605311200009" && MaTK != "1111")
    {
        TenNH = "Ngân hàng Nông nghiệp và Phát Triển VN";
    }
    else if (MaNH == "1890201002962" && MaTK != "1111")
    {
        TenNH = "Ngân hàng Nông nghiệp và Phát Triển VN";
    }
    else if (MaNH == "2000201348722" && MaTK != "1111")
    {
        TenNH = "Ngân hàng Nông nghiệp và Phát Triển VN";
    }
    else if (MaNH == "311100007727122" && MaTK != "1111")
    {
        TenNH = "Ngân hàng TMCP Đầu tư và Phát Triển VN";
    } else if (MaNH == "31110370007977" && MaTK != "1111")
    {
        TenNH = "Ngân hàng TMCP Đầu tư và Phát Triển VN";
    }
    else if (MaNH == "3304000058249000" && MaTK != "1111")
    {
        TenNH = "Ngân hàng Việt Á  - Chi Nhánh Sài Gòn";
    }
    else if (MaNH == "3601201002934" && MaTK != "1111")
    {
        TenNH = "Ngân hàng Nông nghiệp và phát triển VN";
    }
    else if (MaNH == "4939668" && MaTK != "1111")
    {
        TenNH = "Ngân hàng TMCP Á Châu (ACB)";
    }
    else if (MaNH == "5506201002874" && MaTK != "1111")
    {
        TenNH = "Ngân hàng Nông Nghiệp và Phát Triển VN";
    }
    else if (MaNH == "6090201003970_AGRIBANK" && MaTK != "1111")
    {
        TenNH = "Ngân hàng Nông Nghiệp và Phát Triển VN";
    }
    else if (MaNH == "6900201004039_AGRIBANK" && MaTK != "1111")
    {
        TenNH = "Ngân hàng Nông Nghiệp và Phát Triển VN";
    }
    else if (MaNH == "700011141409" && MaTK != "1111")
    {
        TenNH = "Ngân hàng TNHH MTV SHINHAN VIỆT NAM";
    }
    else if (MaNH == "71001023887" && MaTK != "1111")
    {
        TenNH = "Ngân hàng TMCP Ngoại Thương VN";
    }
    else if (MaNH == "71010001751421" && MaTK != "1111")
    {
        TenNH = "Ngân hàng TMCP Đầu Tư và Phát triển VN";
    }
    else if (MaNH == "907-18-071111-8" && MaTK != "1111")
    {
        TenNH = "Ngân hàng CTBC";
    }
    else if (MaNH == "907-18-071112-1" && MaTK != "1111")
    {
        TenNH = "Ngân hàng CTBC";
    }
    else if (MaNH == "CT_QUYTM" && MaTK != "1111")
    {
        TenNH = "";
    }
    else if (MaNH == "DN_QUYTM" && MaTK != "1111")
    {
        TenNH = "";
    }
    else if (MaNH == "HN_QUYTM" && MaTK != "1111")
    {
        TenNH = "";
    }
    else if (MaNH == "MD_QUYTM" && MaTK != "1111")
    {
        TenNH = "";
    }
    else if (MaNH == "NA_QUYTM" && MaTK != "1111")
    {
        TenNH = "";
    }
    else if (MaNH == "NT_QUYTM" && MaTK != "1111")
    {
        TenNH = "";
    }
    else if (MaNH == "OPC_QUYTM" && MaTK != "1111")
    {
        TenNH = "";
    }
    else if (MaNH == "OPC_VANG" && MaTK != "1111")
    {
        TenNH = "";
    }
    else if (MaNH == "TG_QUYTM" && MaTK != "1111")
    {
        TenNH = "";
    }

    if (MaTK == "1111")
    {
        title = "Sổ Quỹ Tiền Mặt";
        ten = "1111 - Tiền Mặt Việt Nam";
    }
    if (MaTK == "1121")
    {
        title = "Sổ Quỹ Ngân Hàng";
        ten = "1121 - Tiền Gửi Ngân Hàng VNĐ";
    }
    if (MaTK == "1131")
    {
        title = "Sổ Quỹ Ngân Hàng";
        ten = "1131 - Tiền Đang Chuyển (VND)";
    }
    if (MaTK == "1113")
    {
        title = "Sổ Quỹ Tiền Mặt";
        ten = "1113 - Vàng";
    }
}
@using System.Data;
@using System.Globalization;
<!DOCTYPE html>
<html lang="en">

<head>



    <style>
    

        * {
            font-family: "Times New Roman";
        }

        a {
            text-decoration: none;
        }

        .container table {
            justify-content: center;
            align-items: center;
            height: 50vh;
            zoom: 90%;
            text-align: center;
        }

        .container canvas {
            justify-content: center;
            align-items: center;
            height: min-content;
            zoom: normal;
        }

        h3 {
            text-align: center;
            color: blue;
        }

        table, td, th {
            border: 1px solid black;
            align-items: center;
            margin-left: auto;
            margin-right: auto;
            height: 50px;
        }

        table {
            border-collapse: collapse;
        }

        .num {
            text-align: center;
            width: 100px;
        }

        .ten {
            text-align: left;
        }

        button {
            background-color: #2297f6;
            border: none;
            outline: none;
            padding: 5px;
            font-size: 30px;
            color: #ffffff;
            cursor: pointer;
            margin-top: 20px;
            text-align: center;
        }

        p {
            color: #ffffff;
        }



        canvas {
            width: 200px;
            height: 100px;
            text-align: center;
        }

        .tu_ngay {
            height: 35px;
            border-radius: 5px;
            border: 1px solid #dcdcdc;
            padding: 0px 10px;
            outline: none;
            Format: 'd-m-y';
        }

        .den_ngay {
            height: 35px;
            border-radius: 5px;
            border: 1px solid #dcdcdc;
            padding: 0px 10px;
            outline: none;
            Format: 'd-m-y';
        }



        div#chart {
            text-align: center;
            display: flex;
            /*         justify-content:;*/
            width: 50%;
            height: 300px;
        }

        .submit {
            height: 50px;
            background-color: silver;
            border: none;
            color: cadetblue;
            border-radius: 7px;
            font-size: 18px;
            font-weight: 600;
            margin-top: 20px;
            justify-content: center;
            align-items: center;
            transition: all 1s ease-in-out;
        }

            .submit:hover {
                background-color: darkcyan;
                color: #ffffff;
                transition: cubic-bezier(0.075, 0.82, 0.165, 1);
            }

        .form .locBC {
            display: flex;
            flex-direction: column;
            padding: 20px;
            width: 500px;
            height: 400px;
            float: left;
        }

        .form table {
            justify-content: center;
            align-items: center;
            height: 50vh;
            zoom: 90%;
            text-align: center;
        }

        .expandable {
            cursor: pointer;
        }

        .percent {
            width: 20%;
            text-align: right;
            text-align: center;
            background-color: #eee;
            background: linear-gradient(to right, #3399dd, #3399dd);
            background-size: 1% 100%;
            background-repeat: no-repeat;
        }



        #data {
            width: 100%;
            height: 150px;
            background: white;
            float: inline-start;
        }

        .dropdown-check-list {
            display: inline-block;
        }

            .dropdown-check-list .anchor {
                position: relative;
                cursor: pointer;
                display: inline-block;
                padding: 5px 50px 5px 10px;
                border: 1px solid #ccc;
            }

                .dropdown-check-list .anchor:after {
                    position: absolute;
                    content: "";
                    border-left: 2px solid black;
                    border-top: 2px solid black;
                    padding: 5px;
                    right: 10px;
                    top: 20%;
                    -moz-transform: rotate(-135deg);
                    -ms-transform: rotate(-135deg);
                    -o-transform: rotate(-135deg);
                    -webkit-transform: rotate(-135deg);
                    transform: rotate(-135deg);
                }

                .dropdown-check-list .anchor:active:after {
                    right: 8px;
                    top: 21%;
                }

            .dropdown-check-list ul.items {
                padding: 2px;
                display: none;
                margin: 0;
                border: 1px solid #ccc;
                border-top: none;
            }

                .dropdown-check-list ul.items li {
                    list-style: none;
                }

            .dropdown-check-list.visible .anchor {
                color: #0094ff;
            }

            .dropdown-check-list.visible .items {
                display: block;
            }

        .custom-combobox-container {
            position: relative;
            width: 100%;
            outline: none;
            border: none;
        }

        .custom-combobox {
            width: 100%;
            display: flex;
            align-items: center;
            border: 1px solid rgb(199, 199, 199);
            padding: 10px;
        }

            .custom-combobox input[type="text"] {
                width: 95%;
                border: none;
                outline: none;
                background: none;
            }

        .options-container {
            position: absolute;
            width: 100%;
            z-index: 100;
            border: 1px solid rgb(204, 204, 204);
            border-top: none;
            display: none;
            height: 150px;
            overflow-y: scroll;
        }

            .options-container label {
                display: block;
                cursor: pointer;
                padding: 5px;
                margin-top: 5px;
                user-select: none;
            }

                .options-container label:hover {
                    background: rgb(255, 255, 255);
                }

            .options-container::-webkit-scrollbar {
                width: 8px;
            }

            .options-container::-webkit-scrollbar-thumb {
                background-color: white;
            }

        .sidebar {
            position: relative;
            top: 0;
            left: 0;
            height: 50px;
            width: 200px;
            transition: all 0.5s ease;
        }

        .myInput {
            text-align: center;
            height: auto;
            width: 1000px;
            padding: 10px;
        }

        .container {
            text-align: center;
        }

        .data_table {
            width: max-content;
        }

        .bieu_do {
            padding: 10px;
            margin: 10%;
            text-align: center;
            width: 200px;
            font-size: 16px;
            font-weight: 600;
            color: #fff;
            cursor: pointer;
            margin: 20px;
            height: 55px;
            text-align: center;
            border: none;
            background-size: 300% 100%;
            border-radius: 10px;
            moz-transition: all .4s ease-in-out;
            -o-transition: all .4s ease-in-out;
            -webkit-transition: all .4s ease-in-out;
            transition: all .4s ease-in-out;
        }

            .bieu_do:hover {
                background-position: 100% 0;
                moz-transition: all .4s ease-in-out;
                -o-transition: all .4s ease-in-out;
                -webkit-transition: all .4s ease-in-out;
                transition: all .4s ease-in-out;
            }

            .bieu_do:focus {
                outline: none;
            }

        .bieu_do {
            background-image: linear-gradient(to right, #0ba360, #3cba92, #30dd8a, #2bb673);
            box-shadow: 0 4px 15px 0 rgba(23, 168, 108, 0.75);
        }

        .chart {
            margin: 20px 0px 0px 0px;
        }

        .text-loading {
            position: fixed;
            top: 60%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 13px;
            color: black;
            z-index: 2;
            background-color: rgba(255, 255, 255, 0.9);
            padding: 5px 10px;
            display: none;
        }

        .custom-checkbox {
            margin-top: 10px;
            display: inline-block;
            position: relative;
            padding-left: 30px;
            margin-right: 15px;
            cursor: pointer;
        }

            .custom-checkbox input {
                position: absolute;
                opacity: 0;
                cursor: pointer;
            }

        .checkmark {
            position: absolute;
            top: 0;
            left: 0;
            height: 25px;
            width: 25px;
            border: 2px solid black;
            background-color: #ffffff;
        }

        .custom-checkbox:hover input ~ .checkmark {
            background-color: #ccc;
        }

        .custom-checkbox input:checked ~ .checkmark {
            background-color: #2196F3;
        }

        .checkmark:after {
            content: "";
            position: absolute;
            display: none;
        }

        .custom-checkbox input:checked ~ .checkmark:after {
            display: block;
        }

        .custom-checkbox .checkmark:after {
            left: 9px;
            top: 5px;
            width: 5px;
            height: 10px;
            border: solid white;
            border-width: 0 3px 3px 0;
            transform: rotate(45deg);
        }

        .checkContainer {
            height: 300px;
            overflow: auto;
            scrollbar-width: none;
        }

            .checkContainer::-webkit-scrollbar {
                width: 0.2em;
                background-color: transparent;
            }

        .tabs {
            display: inline-block;
            /* bottom: 0;
            left: 0;
            right: 0;*/
            width: 300vh;
            height: 50px;
            /* margin: 15px auto;*/
            border-bottom: 1px solid #DAE0E7;
            background: #F9F9F9;
            list-style-type: none;
            padding: 0px 12px 0;
        }

        a {
            text-decoration: none;
            color: #333;
        }

        .tab {
            float: left;
            height: 44px;
            margin: 0 8px -1px 0;
            border: 1px solid #DAE0E7;
            background: #F9F9F9;
            border-radius: 0px 0px 0 0;
            overflow: hidden;
        }

            .tab, .tab a {
                transition: all .25s;
            }

                .tab a {
                    display: inline-block;
                }

                    .tab a:first-child {
                        padding: 12px 2px 12px 16px;
                        white-space: nowrap;
                    }

                .tab.tabClosed, .tab.tabClosed a:first-child {
                    margin-right: 0;
                    border-width: 0;
                }

                .tab.tabClosed {
                    width: 0 !important; /* use important because we need to set the width of tabs in javascript in order to be able to animate them to 0 */
                }

                    .tab.tabClosed a {
                        opacity: 0;
                    }

        .closeTab:hover {
            background: #DAE0E7;
        }

        .tab-control {
            z-index: 1;
            position: fixed;
        }

            .tab-control ul {
                position: absolute;
                bottom: 0px;
                /* left:300px;*/
            }

                .tab-control ul li {
                    text-align: center;
                }

        .closeTab {
            position: relative;
            display: inline-block;
            vertical-align: middle;
            margin-left: 10px; /* Điều chỉnh khoảng cách với h4 */
        }

        .closeIcon {
            display: inline-block;
            width: 30px;
            height: 25px;
            border-radius: 50%;
            background-color: white;
            color: black; /* Màu chữ x */
            text-align: center;
            line-height: 25px;
        }

        .tab.active {
            background-color: cornflowerblue; /* Màu nền tab khi active */
            color: #fff; /* Màu chữ khi active */
        }

        .tab.selected-tab {
            pointer-events: none;
            background-color: #3763a3; /* Màu nền của tab */
        }

            .tab.selected-tab a {
                color: white /* Màu nền của tab */
            }

            .tab.selected-tab .closeTab {
                pointer-events: auto;
            }

        .data_table {
            max-height: 100%;
            overflow: auto;
        }

            .data_table thead {
                position: sticky;
                top: 0;
                z-index: 100;
            }

      /*  .bold-row td:nth-child(3) {
            font-weight: bold;
        }*/

        .bold-row td:nth-child(4) {
            font-weight: bold;
        }

        .bold-row td:nth-child(5) {
            font-weight: bold;
        }

        .bold-row td:nth-child(6) {
            font-weight: bold;
        }

        .bold-row td:nth-child(7) {
            font-weight: bold;
        }

        .bold-row td:nth-child(8) {
            font-weight: bold;
        }

        .bold-row td:nth-child(9) {
            font-weight: bold;
        }
        .num {
            mso-number-format: "\#\,\#\#0\.00_ \;\[Red\]\-\#\,\#\#0\.00\ ";
        }

        .date {
            mso-number-format: "Medium Date";
        }
        .select-btn2 {
            position: relative;
        }

        #nhomtheoselect2 {
            display: none; /* Ẩn dropdown ban đầu */
            position: absolute;
            top: 100%;
            left: 0;
            width: 100%;
            z-index: 1;
            white-space: nowrap; /* Ngăn ngừa text quá dài bị xuống dòng */
            overflow-x: auto; /* Hiển thị thanh cuộn khi nội dung quá dài */
            max-height: 200px; /* Đặt chiều cao tối đa của dropdown */
            box-sizing: border-box;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.14.0/js/bootstrap-select.min.js"></script>
    <script type="text/javascript" src="Scripts/table2excel.js"></script>


    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>SoQuyTienMat</title>
    <meta content="" name="description">
    <meta content="Author" name="MJ Maraz">
    <link href="~/assets/images/favicon.png" rel="icon">
    <link href="~/assets/images/favicon.png" rel="apple-touch-icon">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap" rel="stylesheet">
    <!-- ========================================================= -->


    <link rel="stylesheet" href="~/assets/css/bootstrap.min.css">
    <link rel="stylesheet" href="~/assets/css/datatables.min.css">
    <link rel="stylesheet" href="~/assets/css/style.css">
    <link rel="stylesheet" href="~/Styles/loader.css">
</head>
<!-- =============== Design & Develop By = MJ MARAZ   ====================== -->

<body style="background-color: #e0e8ee ">
    <div class="loader" style="z-index:1"></div>

    <div class="sidebar">
        <div class="logo-details">

        </div>
        <ul class="nav-links" style="justify-content: center; display: flex; margin-left: 10px; width: 300px">
            <li>
                <form id="dateForm" action="SoQuyTienMat" method="post" onsubmit="handleFormSubmit(event)">
                    <div id="locBC">
                        <span id="spanText" class="text-loading">[usp_SoQuyTienMat_SAP]</span>
                        <a>Từ Ngày</a><br /><br />
                        <input class="tu_ngay" placeholder="Từ Ngày" id="tu_ngay" name="From_date" type="date" format="YYYY-MM-DD" value="@Request.Cookies["From_date"].Value" />
                        <script>$("#tu_ngay").datetimepicker({ timepicker: false, format: 'Y-m-d' });</script><br /><br />
                        <a>Đến Ngày</a><br /><br />
                        <input class="den_ngay" id="den_ngay" placeholder=" Đến Ngày" name="To_date" type="DATE" format="YYYY-MM-DD" value="@Request.Cookies["To_date"].Value" /><br /><br />
                        <script>$("#den_ngay").datetimepicker({ timepicker: false, format: 'Y-m-d' });</script>
                    </div>
                    <h6>Chọn Tài Khoản</h6>
                    <div class="select-btn" style="width:100px;margin-top:10px">
                        <select name="Nhom" id="nhomtheoselect" onchange="saveSelectedValueToCookie()">
                            <option value="1111" data-tenTK="Tiền Mặt Việt Nam">1111 - Tiền Mặt Việt Nam</option>
                            <option value="1121" data-tenTK="Tiền Gửi Ngân Hàng VNĐ">1121 - Tiền Gửi Ngân Hàng VNĐ</option>
                            <option value="1131" data-tenTK="Tiền Đang Chuyển (VND)">1131 - Tiền Đang Chuyển (VND)</option>
                            <option value="1113" data-tenTK="Vàng">1113 - Vàng</option>
                        </select>
                    </div>
                    <h6>Chọn Ngân Hàng</h6>

                    <div class="select-btn2" style="width:250px;margin-top:10px">
                        <input type="text" id="searchInput" oninput="filterDropdown()" placeholder="Tìm kiếm..." autocomplete="off">
                        <select name="Nhom" id="nhomtheoselect2" size="5" onchange="saveSelectedValueToCookie2()">

                            <option value="001-033554-001">(OPC)Ngân hàng TNHH MTC HSBC</option>
                            <option value="007.137.1023892">(OPC)Ngân hàng TMCP Ngoại Thương Việt Nam</option>
                            <option value="1012756827_VCB">(OPC_TG)Ngân hàng TMCP Ngoại Thương Việt Nam</option>
                            <option value="1037931581">(OPC_VT)Ngân Hàng TMCP Công Thương Việt Nam</option>
                            <option value="1037931581_VCB">(OPC_VT)Ngân Hàng TMCP Ngoại Thương Việt Nam</option>
                            <option value="111002637244_VIETIN">(OPC_HN)Ngân hàng TMCP Công Thương Việt Nam</option>
                            <option value="111101409003">(OPC_HN)Ngân hàng thương mại Cổ phần Quân đội</option>
                            <option value="116000030030">(OPC_NT)Ngân hàng TMCP Công thương Việt Nam</option>
                            <option value="118002874433">(OPC)Ngân hàng TMCP Công thương Việt Nam</option>
                            <option value="118002929530">(OPC_MD)Ngân hàng TMCP Công thương Việt Nam</option>
                            <option value="12343939">(OPC)Ngân hàng Việt Á - Chi Nhánh Sài Gòn</option>
                            <option value="151703359">(OPC)Ngân hàng TMCP Á Châu (ACB)</option>
                            <option value="1605201011620">(OPC)Ngân hàng Nông nghiệp và Phát Triển VN</option>
                            <option value="1605201013995">(OPC_TP)Ngân hàng Nông nghiệp và Phát Triển VN</option>
                            <option value="1605311200009">(OPC)Ngân hàng Nông nghiệp và Phát Triển VN</option>
                            <option value="1890201002962">(OPC_CT)Ngân hàng Nông nghiệp và Phát Triển VN</option>
                            <option value="2000201348722">(OPC_DN)Ngân hàng Nông nghiệp và Phát Triển VN</option>
                            <option value="31110000772712">(OPC)Ngân hàng TMCP Đầu tư và Phát Triển VN</option>
                            <option value="31110370007977">(OPC)Ngân hàng TMCP Đầu tư và Phát Triển VN</option>
                            <option value="3304000058249000">(OPC)Ngân hàng Việt Á  - Chi Nhánh Sài Gòn</option>
                            <option value="3601201002934">(OPC_NA)Ngân hàng Nông nghiệp và phát triển VN</option>
                            <option value="4939668">(OPC_TP)Ngân hàng TMCP Á Châu (ACB)</option>
                            <option value="5506201002874">(OPC_MD)Ngân hàng Nông Nghiệp và Phát Triển VN</option>
                            <option value="6090201003970_AGRIBANK">(OPC_VT)Ngân hàng Nông Nghiệp và Phát Triển VN</option>
                            <option value="6900201004039_AGRIBANK">(OPC_TG)Ngân hàng Nông Nghiệp và Phát Triển VN</option>
                            <option value="700011141409">(OPC)Ngân hàng TNHH MTV SHINHAN VIỆT NAM</option>
                            <option value="71001023887">(OPC)Ngân hàng TMCP Ngoại Thương VN</option>
                            <option value="71010001751421">(OPC)Ngân hàng TMCP Đầu Tư và Phát triển VN</option>
                            <option value="907-18-071111-8">(OPC)Ngân hàng CTBC</option>
                            <option value="907-18-071112-1">(OPC)Ngân hàng CTBC</option>
                            <option value="CT_QUYTM">(OPC_CT)Not Assigned</option>
                            <option value="DN_QUYTM">(OPC_DN)Not Assigned</option>
                            <option value="HN_QUYTM">(OPC_HN)Not Assigned</option>
                            <option value="MD_QUYTM">(OPC_MD)Not Assigned</option>
                            <option value="NA_QUYTM">(OPC_NA)Not Assigned</option>
                            <option value="NT_QUYTM">(OPC_NT)Not Assigned</option>
                            <option value="OPC_QUYTM">(OPC)Not Assigned</option>
                            <option value="OPC_VANG">(OPC)Not Assigned</option>
                            <option value="TG_QUYTM">(OPC_TG)Not Assigned</option>



                        </select>
                    </div>
                    <div>
                        <button class="submit" type="submit" id="runReportButton" onclick="runReport();saveNgay()">
                            Chạy Báo Cáo
                        </button>

                    </div>

                </form>

                <div style="display:flex">
                    @*<button id="exportbutton"style="border-radius: 10px; margin-bottom: 10px;margin-top:10px; background-color: #aec9e0; color: #3483bd ">Xuất Excel</button>*@
                    <button style="border-radius: 10px; margin-bottom: 10px;margin-top:10px; background-color: #aec9e0; color: #3483bd " onclick="exportToExcel()">
                        @*<a onclick="return ExcellentExport.excel(this, 'example', 'Sheet 1');" download="SoQuyTienMat.xls" style="color: #3483bd">Xuất Excel </a>*@Xuất Excel
                    </button>
                    <button onclick="printPage()" style="border-radius: 10px; margin-left: 10px; margin-bottom: 10px;margin-top:10px; background-color: #aec9e0; color: #3483bd;padding:10px ">
                        <i class="fa-solid fa-print">Print</i>
                    </button>
                </div>
                @*<a download="somedata.xls"
                       href="#"
                       onclick="return ExcellentExport.excel(this, 'example', 'Sheet Name Here');">
                        Export table to Excel
                    </a>*@
            </li>
        </ul>
    </div>


    <header class="header_part" style="background-color: #aec9e0; color: #3483bd ">
        @if (Request.Cookies["UserName"].Value == "Admin-cnct" || Request.Cookies["UserName"].Value == "Admin-cntg" || Request.Cookies["UserName"].Value == "Admin-cnmd" || Request.Cookies["UserName"].Value == "Admin-cnh1" || Request.Cookies["UserName"].Value == "Admin-cnvt"
              || Request.Cookies["UserName"].Value == "Admin-cnnt" || Request.Cookies["UserName"].Value == "Admin - cndn" || Request.Cookies["UserName"].Value == "Admin - cnna" || Request.Cookies["UserName"].Value == "Admin - cnhn" && Request.Cookies["UserName"].Value == "admin-cnct" || Request.Cookies["UserName"].Value == "admin-cntg" || Request.Cookies["UserName"].Value == "admin-cnmd" || Request.Cookies["UserName"].Value == "admin-cnh1" || Request.Cookies["UserName"].Value == "admin-cnvt"
              || Request.Cookies["UserName"].Value == "admin-cnnt" || Request.Cookies["UserName"].Value == "admin - cndn" || Request.Cookies["UserName"].Value == "admin - cnna" || Request.Cookies["UserName"].Value == "admin - cnhn")
        {



            <a href="/Home/About1" style="cursor:pointer">
                <img src="~/Images/opc.png" style="height:60px;width:60px;margin-left:10px">
            </a>
        }
        else
        {
            <a href="/Home/About" style="cursor:pointer">
                <img src="~/Images/opc.png" style="height:60px;width:60px;margin-left:10px">
            </a>
        }
        <h4 style="color:#3483bd">@title</h4>
        <h4 style="color:#3483bd">Từ @formattedFromDate đến @formattedToDate</h4>
        <h6 style="color:#3483bd;font-weight:bold">@ten - @TenNH</h6>
    </header>
    <!-- =======  Data-Table  = Start  ========================== -->

    <div class="container" style="margin-left:200px">


        <div class="row">
            <div class="col-12">
                <div class="search-container">

                    <span>Search: <input type="Text" name="" id="myInput" placeholder="Tìm kiếm" onkeyup="searchFun()"></span>
                    <div class="search"></div>
                </div>
                <div class="data_table" style="max-height:1500px;width:1200px">

                    <table id="example" class="table table-striped table-bordered" data-excel-name="Sheet 1">
                        <thead class="table-dark" id="head">
                            <tr>

                                <th colspan="4">Chứng Từ</th>
                                <th rowspan="2" style="width:120px">Tên Đối Tượng</th>
                                <th rowspan="2">Diễn giải</th>
                                <th rowspan="2">TK đối ứng</th>
                                <th colspan="2">Phát sinh</th>
                                <th rowspan="2">Số dư</th>

                            </tr>
                            <tr>
                                <th>Ngày</th>
                                <th style="width:150px">Số</th>
                                <th>Payment</th>
                                <th>Payment Advice</th>
                                <th>Thu</th>
                                <th>Chi</th>



                            </tr>
                        </thead>
                        @*<tbody>
                                @foreach (DataRow row2 in Model.Tables[0].Rows)
                                {
                                    <tr class="data-row">
                                        <td>@row2["Ngay_Ct1"]</td>
                                        <td data-format="string">@row2["So_NumBer"].ToString()</td>
                                        <td>@row2["So_Ct"].ToString()</td>
                                        <td style="text-align:left">@row2["Ten_Dt"]</td>
                                        <td class="text" style="text-align:left">@row2["Dien_Giai"]</td>
                                        <td>@row2["Tk_Du"]</td>
                                        <td data-t="n" class="num" style="text-align:right"> @String.Format("{0:n0}", Convert.ToDecimal(row2["Ps_No"])).Replace(",", ".")</td>
                                        <td data-t="n" style="text-align:right"> @String.Format("{0:n0}", Convert.ToDecimal(row2["Ps_Co"])).Replace(",", ".")</td>
                                        <td data-t="n" style='text-align:right;'> @String.Format("{0:n0}", Convert.ToDecimal(row2["Du_Cuoi"])).Replace(",", ".")</td>


                                    </tr>



                                }
                            </tbody>*@
                        <tbody>
                            <tr>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>

                                <td style="font-weight:bold;text-align:left;width:150px">Dư Đầu Kỳ</td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td class="DuDauKy"style="font-weight:bold;text-align:right"></td>
                            </tr>
                            @{
                                //decimal Du_Cuoi_FirstRow = 0; // Khởi tạo biến lưu giá trị Du_Cuoi của hàng đầu tiên
                                //bool firstLoopSkipped = false;
                                decimal Du_Cuoi_Calculated = 0;
                                bool isFirstRowFound = false;
                                decimal DuCuoiKy = 0;
                                decimal sumThu = 0;
                                decimal sumChi = 0;
                                string formattedDuCuoi = "";
                                string formattedThu = "";
                                string formattedChi = "";
                                string formattedDuCuoiKy = "";
                                foreach (DataRow row2 in Model.Tables[0].Rows)
                                {
                                    if (row2["Ngay_Ct1"] != DBNull.Value && !string.IsNullOrEmpty(row2["Ngay_Ct1"].ToString()))
                                    {
                                        DateTime ngayCt;
                                        if (DateTime.TryParseExact(row2["Ngay_Ct1"].ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out ngayCt))
                                        {
                                            //if (!firstLoopSkipped)
                                            //{
                                            //    Du_Cuoi_FirstRow = Convert.ToDecimal(row2["Du_Cuoi"]); // Lấy giá trị Du_Cuoi của hàng đầu tiên
                                            //    firstLoopSkipped = true;
                                            //    continue;
                                            //}

                                            DateTime fromDate1;
                                            DateTime toDate1;
                                            if (DateTime.TryParseExact(formattedFromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out fromDate1) &&
                                                DateTime.TryParseExact(formattedToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out toDate1))
                                            {
                                                // Đảo ngược vị trí ngày và tháng
                                                string formattedNgayCt = ngayCt.ToString("dd/MM/yyyy");
                                                ngayCt.ToString("MM/dd/yyyy");
                                                if (ngayCt.Day >= fromDate1.Day && ngayCt.Day <= toDate1.Day)
                                                {
                                                    if (!isFirstRowFound)
                                                    {
                                                        decimal PS_No = Convert.ToDecimal(row2["Ps_No"]);
                                                        decimal PS_Co = Convert.ToDecimal(row2["Ps_Co"]);
                                                        Du_Cuoi_Calculated = Convert.ToDecimal(row2["Du_Cuoi"]) - PS_No + PS_Co;
                                                        isFirstRowFound = true; // Đánh dấu là đã tìm thấy giá trị đầu tiên
                                                        formattedDuCuoi = String.Format(Du_Cuoi_Calculated.ToString("#,##0", CultureInfo.InvariantCulture)).Replace(",",".");


                                                    }

                                                    <tr class="data-row">
                                                        <td>@formattedNgayCt</td>
                                                        <td data-format="string">@row2["So_NumBer"].ToString()</td>
                                                        <td>@row2["So_Ct"].ToString()</td>
                                                        <td>@row2["So_Ct_Chi"].ToString()</td>
                                                        <td style="text-align:left">@row2["Ten_Dt"]</td>
                                                        <td class="text" style="text-align:left">@row2["Dien_Giai"]</td>
                                                        <td>@row2["Tk_Du"]</td>
                                                        <td data-t="n" class="num" style="text-align:right">@String.Format("{0:n0}", Convert.ToDecimal(row2["Ps_No"])).Replace(",", ".")</td>
                                                        <td data-t="n" style="text-align:right">@String.Format("{0:n0}", Convert.ToDecimal(row2["Ps_Co"])).Replace(",", ".")</td>
                                                        <td data-t="n" style="text-align:right;">@String.Format("{0:n0}", Convert.ToDecimal(row2["Du_Cuoi"])).Replace(",", ".")</td>
                                                    </tr>
                                                    decimal Thu = Convert.ToDecimal(row2["PS_No"]);
                                                    decimal Chi = Convert.ToDecimal(row2["PS_Co"]);
                                                    sumThu += Thu;
                                                    sumChi += Chi;
                                                    formattedChi = String.Format(sumChi.ToString("#,##0", CultureInfo.InvariantCulture)).Replace(",", ".");
                                                    formattedThu = String.Format(sumThu.ToString("#,##0", CultureInfo.InvariantCulture)).Replace(",", ".");
                                                    DuCuoiKy = Convert.ToDecimal(row2["Du_Cuoi"]);
                                                    formattedDuCuoiKy = String.Format(DuCuoiKy.ToString("#,##0", CultureInfo.InvariantCulture)).Replace(",", ".");

                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            <tr style="font-weight:bold">
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td>Tổng Phát Sinh</td>
                                <td></td>
                                <td class="ThuCuoiKy"style="font-weight:bold;text-align:right"></td>
                                <td class="ChiCuoiKy"style="font-weight:bold;text-align:right"></td>

                                <td></td>
                            </tr>
                            <tr style="font-weight:bold">
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td>Dư Cuối Kỳ</td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td class="DuCuoiKy"style="font-weight:bold;text-align:right"></td>

                            </tr>
                        </tbody>







                    </table>
                </div>
            </div>
        </div>
    </div>
    <!-- =======  Data-Table  = End  ===================== -->
    <!-- ============ Java Script Files  ================== -->


    <script src="~/assets/js/bootstrap.bundle.min.js"></script>

    @*<script src="~/assets/js/datatables.min.js"></script>*@
    <link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>
    <script src="https://unpkg.com/excellentexport@4.0.0/dist/excellentexport.min.js"></script>
    <script src="~/Scripts/excellentexport.js"></script>
    <script src="//cdn.rawgit.com/rainabba/jquery-table2excel/1.1.0/dist/jquery.table2excel.min.js"></script>

    <script src="~/Scripts/table2excel.js"></script>
    <script src="~/assets/js/vfs_fonts.js"></script>
    <script src="~/assets/js/custom.js"></script>
    @*<script>
            document.getElementById("exportbutton").addEventListener('click', function () {
                ExcellentExport.excel(this, 'example', 'Sheet 1');
            });
        </script>*@
<script>
    $(".DuDauKy").text('@formattedDuCuoi');
    $(".ThuCuoiKy").text('@formattedThu');
     $(".ChiCuoiKy").text('@formattedChi');
     $(".DuCuoiKy").text('@formattedDuCuoiKy');
</script>
    <script>
        function exportToExcel() {
            // Lấy danh sách cột cần xuất từ bảng gốc
            var columnsToExport = ['Ngày', 'Số', 'Số Trên SAP', 'Tên Đối Tượng', 'Diễn Giải', 'TK Đối Ứng', 'Thu', 'Chi', 'Số dư'];

            // Tạo bảng tạm thời chỉ chứa cột cần xuất
            var temporaryTable = $('#example').clone();

            // Lặp qua các cột không nằm trong danh sách cần xuất và ẩn chúng
            temporaryTable.find('thead th, tbody td').each(function () {
                var columnHeader = $(this).text();
                if (!columnsToExport.includes(columnHeader)) {
                    $(this).hide();
                }
            });

            // Format cells with numeric data (assuming 'Tổng tiền' is a numeric column)
            temporaryTable.find('tbody td:contains("₫")').attr('data-type', 'number'); // This assumes that the 'Tổng tiền' column contains "₫" symbol

            // Xuất Excel từ bảng tạm thời
            temporaryTable.table2excel({
                exclude: ".hidden",
                name: "Sheet 1",
                filename: "SoQuyTienMat"
            });
        }

    </script>
    <script>
        // Lấy các phần tử cần sử dụng
        var input = document.getElementById("searchInput");
        var select = document.getElementById("nhomtheoselect2");

        // Thêm event listener cho sự kiện click trên toàn bộ trang
        document.addEventListener("click", function (event) {
            // Kiểm tra nếu sự kiện click không phải từ ô input hoặc dropdown
            if (event.target !== input && event.target !== select) {
                // Ẩn dropdown
                select.style.display = "none";
            }
        });
        function filterDropdown() {
            var filter = input.value.toUpperCase();
            var option = select.getElementsByTagName("option");

            for (var i = 0; i < option.length; i++) {
                var txtValue = option[i].textContent || option[i].innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    option[i].style.display = "";
                } else {
                    option[i].style.display = "none";
                }
            }

            // Tự động mở rộng dropdown
            select.size = Math.min(5, select.options.length);

            // Hiển thị dropdown khi ô input được click
            select.style.display = "block";
        }
        function saveSelectedValueToCookie2() {
            var select = document.getElementById("nhomtheoselect2");
            var input = document.getElementById("searchInput");

            // Lấy giá trị đã chọn từ select
            var selectedValue = select.value;

            // Cập nhật giá trị của ô input
            input.value = selectedValue;

            // Đặt giá trị vào cookie, bao gồm trường hợp selectedValue là null hoặc undefined
            document.cookie = 'Ma_NH=' + (selectedValue != null ? selectedValue : '');

            // Ẩn dropdown select
            select.style.display = "none";

            // Thực hiện các bước khác theo yêu cầu của bạn.
            console.log("Đã chọn giá trị: " + selectedValue);

            // Gọi hàm để nhóm dữ liệu dựa trên giá trị đã chọn
        }

    </script>
    @*<script>
            document.getElementById("exportbutton").addEventListener('click', function () {
                var table2excel = new Table2Excel();

                // Tạo tên file dựa trên thời gian
                var currentDate = new Date();
                var fileName = "SoQuyTienMat_" + currentDate.getFullYear() + (currentDate.getMonth() + 1) + currentDate.getDate() + ".xlsx";

                table2excel.export(document.querySelectorAll("#example"), fileName);
            });

        </script>*@
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Kiểm tra xem cookie "Ma_NH" có tồn tại không
            var maNHValue = getCookie("Ma_NH");

            // Nếu có giá trị, thiết lập giá trị cho ô input
            if (maNHValue) {
                document.getElementById("searchInput").value = maNHValue;
            }
        });

        // Hàm lấy giá trị của một cookie
        function getCookie(cookieName) {
            var name = cookieName + "=";
            var decodedCookie = decodeURIComponent(document.cookie);
            var cookieArray = decodedCookie.split(';');

            for (var i = 0; i < cookieArray.length; i++) {
                var cookie = cookieArray[i];
                while (cookie.charAt(0) == ' ') {
                    cookie = cookie.substring(1);
                }
                if (cookie.indexOf(name) == 0) {
                    return cookie.substring(name.length, cookie.length);
                }
            }
            return null;
        }
    </script>



    <script>
        function searchFun() {
            var input, filter, table, tr, td, i, j, txtValue;
            input = document.getElementById("myInput");
            filter = input.value.toUpperCase();
            table = document.getElementById("example");
            tr = table.getElementsByClassName("data-row");

            for (i = 0; i < tr.length; i++) {
                var match = false;
                // Đối với mỗi hàng, lặp qua tất cả các cột (td)
                for (j = 0; j < tr[i].getElementsByTagName("td").length; j++) {
                    td = tr[i].getElementsByTagName("td")[j];
                    if (td) {
                        txtValue = td.textContent || td.innerText;
                        // Nếu nội dung của cột có kết quả tìm kiếm, đặt match thành true và thoát khỏi vòng lặp
                        if (txtValue.toUpperCase().indexOf(filter) > -1) {
                            match = true;
                            break;
                        }
                    }
                }
                // Kiểm tra thêm cho cột thứ 3 (j = 2)
                if (!match) {
                    td = tr[i].getElementsByTagName("td")[2]; // Cột thứ 3 (index 2)
                    if (td) {
                        txtValue = td.textContent || td.innerText;
                        if (txtValue.toUpperCase().indexOf(filter) > -1) {
                            match = true;
                        }
                    }
                }
                // Ẩn hoặc hiển thị hàng tùy thuộc vào kết quả tìm kiếm
                if (match) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            }
        }
    </script>



    <script>
        $(document).ready(function () {
            $('#example tbody tr').each(function () {
                var dienGiaiValue = $(this).find('td:nth-child(5)').text(); // 3 là vị trí cột "Dien_Giai"

                if (dienGiaiValue === "DuDauKy") {
                    $(this).addClass("bold-row");
                }
            });
        });
        $(document).ready(function () {
            $('#example tbody tr').each(function () {
                var dienGiaiValue = $(this).find('td:nth-child(5)').text(); // 3 là vị trí cột "Dien_Giai"

                if (dienGiaiValue === "TongPhatSinh") {
                    $(this).addClass("bold-row");
                }
            });
        });
        $(document).ready(function () {
            $('#example tbody tr').each(function () {
                var dienGiaiValue = $(this).find('td:nth-child(5)').text(); // 3 là vị trí cột "Dien_Giai"

                if (dienGiaiValue === "DuCuoiKy") {
                    $(this).addClass("bold-row");
                }
            });
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var selectedInfoFromCookie = getCookie1('Ma_TK');
            if (selectedInfoFromCookie) {
                var selectElement = document.getElementById('nhomtheoselect');

                // Đặt giá trị mặc định cho select dựa trên giá trị cookie
                selectElement.value = selectedInfoFromCookie;

                // Gọi hàm để lưu giá trị mới vào cookie nếu cần thiết
                saveSelectedValueToCookie();
            }
        });

        function saveSelectedValueToCookie() {
            var selectedValue = $("#nhomtheoselect").val();
            document.cookie = 'Ma_TK=' + selectedValue;

            // Gọi hàm để nhóm dữ liệu dựa trên giá trị đã chọn
        }


    </script>

    <script>
        function runReport() {

            const uncheckedCheckboxIndexes = [];
            const checkboxes = document.querySelectorAll('input[name="myCheckbox"]');

            checkboxes.forEach((checkbox, index) => {
                if (!checkbox.checked) {
                    uncheckedCheckboxIndexes.push(index);
                }
            });

            // Lưu trạng thái vào Local Storage
            localStorage.setItem('uncheckedCheckboxIndexes', JSON.stringify(uncheckedCheckboxIndexes));
            // Hiển thị thẻ span có id là "spanText"
            const spanElement = document.getElementById("spanText");
            spanElement.style.display = "block";
            const hiddenElement = document.getElementById("head");
            hiddenElement.style.visibility = "hidden";
        }
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const checkboxes = document.querySelectorAll('input[name="myCheckbox"]');
            const table = document.getElementById('example');

            checkboxes.forEach((checkbox, index) => {
                checkbox.addEventListener('change', function () {
                    const columnIndex = index;
                    const rows = table.querySelectorAll('tr');

                    rows.forEach(row => {
                        const cells = row.querySelectorAll('td, th');
                        cells[columnIndex].style.display = this.checked ? '' : 'none';
                    });
                });
            });
        });
    </script>
    <script>
        function saveNgay() {
            var from_date = document.getElementById("tu_ngay").value;
            var to_date = document.getElementById("den_ngay").value;
            var inputValue = document.getElementById("searchInput").value;
            if (!inputValue.trim()) {
                // Nếu ô input rỗng, đặt giá trị cookie thành khoảng trắng
                document.cookie = 'Ma_NH= ';
            } else {
                // Nếu ô input có giá trị, đặt giá trị cookie theo giá trị của ô input
                document.cookie = 'Ma_NH=' + inputValue;
            }
            document.cookie = "From_date=" + from_date;
            document.cookie = "To_date=" + to_date;
            saveSelectedValueToCookie2();
        }
        function handleFormSubmit(event) {
            event.preventDefault();
            showLoader();
            // Show the loader when the form is submitted


            // Lấy các giá trị ngày đã chọn từ trường nhập liệu
            const fromDate = document.getElementById('tu_ngay').value;
            const toDate = document.getElementById('den_ngay').value;

            // Tạo URL mới với các tham số truy vấn
            const form = event.target;
            const actionUrl = `${form.action}?From_date=${fromDate}&To_date=${toDate}`;

            // Chuyển hướng tới URL mới với các giá trị ngày đã chọn làm các tham số truy vấn
            window.location.href = actionUrl;
        }
        function displaySelectedDate() {
            // Lấy các giá trị ngày đã chọn từ trường nhập liệu
            const fromDate = document.getElementById('tu_ngay').value;
            const toDate = document.getElementById('den_ngay').value;

            // Hiển thị các giá trị ngày đã chọn lên thẻ h5
            const selectedDateDisplay = document.getElementById('selectedDateDisplay');
            selectedDateDisplay.innerText = `Từ ngày: ${fromDate} - Đến ngày: ${toDate}`;
            window.location.href = selectedDateDisplay;
        }

        // Function to show the loader
        function showLoader() {
            const loader = document.querySelector(".loader");
            loader.classList.remove("loader-hidden");
        }

        // Function to hide the loader
        function hideLoader() {
            const loader = document.querySelector(".loader");
            loader.classList.add("loader-hidden");
        }

        /*  Add an event listener to the form submission*/
        document.getElementById("dateForm").addEventListener("submit", (event) => {
            event.preventDefault();
            displaySelectedDate();
            // Show the loader when the form is submitted
            showLoader();

            // Lấy các giá trị ngày đã chọn từ trường nhập liệu
            const fromDate = document.getElementById('tu_ngay').value;
            const toDate = document.getElementById('den_ngay').value;

            // Tạo URL mới với các tham số truy vấn
            const form = event.target;
            const actionUrl = `${form.action}?From_date=${fromDate}&To_date=${toDate}`;

            // Chuyển hướng tới URL mới với các giá trị ngày đã chọn làm các tham số truy vấn
            window.location.href = actionUrl;
        });

        // Add event listener for window load event
        window.addEventListener("load", () => {
            // Hide the loader after the page is loaded
            hideLoader();
            const fromDate = urlParams.get('From_date');
            const toDate = urlParams.get('To_date');
            if (fromDate && toDate) {
                displaySelectedDate();
            }
        });
    </script>

    <script>
        // Hàm lưu trạng thái checkbox vào Local Storage
        function saveCheckboxState() {
            const checkboxes = document.querySelectorAll('input[name="myCheckbox"]');
            const checkboxState = {};

            checkboxes.forEach((checkbox, index) => {
                checkboxState[index] = checkbox.checked;
            });

            localStorage.setItem('checkboxState', JSON.stringify(checkboxState));
        }

        // Lưu trạng thái khi người dùng bỏ chọn checkbox
        // Lắng nghe sự kiện thay đổi của các checkbox
        document.addEventListener('DOMContentLoaded', function () {
            const checkboxes = document.querySelectorAll('input[name="myCheckbox"]');

            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('change', function () {
                    localStorage.setItem(checkbox.value, checkbox.checked);
                });
            });
        });

    </script>
    <script>
        function getCookie(name) {
            var match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));
            if (match) return match[2];
        }

        // Hàm để đặt giá trị mặc định cho dropdown
        function setDefaultDropdownValue() {
            // Lấy giá trị của cookie 'Ma_TK'
            var maTKValue = getCookie('Ma_TK');
            var maNHValue = getCookie('Ma_NH');
            // Nếu cookie tồn tại và giá trị là một trong các giá trị của dropdown
            if (maTKValue && document.getElementById('nhomtheoselect').querySelector('option[value="' + maTKValue + '"]')) {
                // Đặt giá trị mặc định cho dropdown
                document.getElementById('nhomtheoselect').value = maTKValue;
            }
            if (maNHValue) {
                document.getElementById('searchInput').value = maNHValue;
            }
        }

        // Gọi hàm setDefaultDropdownValue khi trang được tải
        window.onload = function () {
            setDefaultDropdownValue();
        };
    </script>
    <script>
        function printPage() {
            // Mở cửa sổ in mới
            var printWindow = window.open('', '_blank');
            printWindow.location.href = "/SoQuyTienMat/SoQuyTienMat_In";



        }
    </script>




</body>

</html>