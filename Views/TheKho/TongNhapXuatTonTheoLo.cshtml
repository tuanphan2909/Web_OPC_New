
@{ ViewBag.Title = "BÁO CÁO NHẬP XUẤT KHO";
    var fromDate = Request.Cookies["From_date"].Value;
    var toDate = Request.Cookies["To_date"].Value;
    var fromDateValue = DateTime.ParseExact(fromDate, "yyyy-MM-dd", CultureInfo.InvariantCulture);
    var toDateValue = DateTime.ParseExact(toDate, "yyyy-MM-dd", CultureInfo.InvariantCulture);

    var formattedFromDate = fromDateValue.ToString("dd/MM/yyyy");
    var formattedToDate = toDateValue.ToString("dd/MM/yyyy");

    var MaNH = Request.Cookies["Ma_Dv"].Value;



    var Ma_Dv = Request.Cookies["Ma_Dv"].Value;
    string Dv = "";
    switch (Request.Cookies["Ma_Dv"].Value)
    {
        case "OPC_B1/TP_B1_DP": Dv = "Kho thành phẩm ĐP trụ sở"; break;
        case "OPC_B2/TP_B2_DP": Dv = "Kho thành phẩm ĐP nhà máy"; break;
        case "OPC_B1/KM_B1_01": Dv = "Kho hàng khuyến mãi"; break;
        case "OPC_B1/TP_B1_CXL": Dv = "Kho thành phẩm Trụ sở chờ xử lý"; break;
        case "OPC_B1/TP_B1_NC": Dv = "Kho thành phẩm Nghiên Cứu điều phối"; break;
        case "OPC_B1/TP_B1_PHIEN": Dv = "Kho vị thuốc cổ truyền Trụ sở"; break;
        case "OPC_B1/TP_B1_PHIEN_CXL": Dv = "Kho vị thuốc cổ truyền trụ sở chờ xử lý"; break;
        case "OPC_B1/XD_B1_01": Dv = "Kho Xăng dầu"; break;
        case "OPC_B1_01020302/HKM_B1_Q1": Dv = "Kho hàng khuyến mãi - Quận 10"; break;
        case "OPC_B1_01020302/TP_B1_Q10": Dv = "Kho quầy 427 Hapu - Hà Nội"; break;
        case "OPC_B1_01020303/TP_B1_HAPU": Dv = "Kho quầy 427 Hapu - Hà Nội"; break;
        case "OPC_B1_01020303/TP_CN_HAPU": Dv = "Kho quầy Hapu tại Chi nhánh"; break;
        case "OPC_B2/BB_B2_01": Dv = "Kho bao bì"; break;
        case "OPC_B2/BB_B2_HD2": Dv = "Kho Bao bì hóa dược 2"; break;
        case "OPC_B2/BHLD_B2": Dv = "Kho bảo hộ lao động"; break;
        case "OPC_B2/CB_B2_01": Dv = "Kho chế biến"; break;
        case "OPC_B2/CB_B2_02": Dv = "Kho chế biến Chờ xử lý"; break;
        case "OPC_B2/CB_B2_HD2": Dv = "Kho Chế biến hóa dược 2"; break;
        case "OPC_B2/CB_B2_HD2_02": Dv = "Kho Chế biến hóa dược 2 chờ xử lý"; break;
        case "OPC_B2/CCDC_B2": Dv = "Kho công cụ dụng cụ"; break;
        case "OPC_B2/DL_B2_01": Dv = "Kho dược liệu"; break;
        case "OPC_B2/DL_B2_PHIEN": Dv = "Kho dược liệu phiến"; break;
        case "OPC_B2/DP_DD_01": Dv = "Kho Điều Phối Đi Đường"; break;
        case "OPC_B2/HD_B2_01": Dv = "Kho hóa dược"; break;
        case "OPC_B2/HD_B2_HD2": Dv = "Kho Nguyên liệu hóa dược 2"; break;
        case "OPC_B2/HKM_B1_01": Dv = "Kho hàng khuyến mãi - Điều phối"; break;
        case "OPC_B2/NCPT_B2": Dv = "Kho RD"; break;
        case "OPC_B2/PTTT_B2": Dv = "Phụ Tùng Thay Thế"; break;
        case "OPC_B2/TKX_B2_01": Dv = "Kho thống kê xưởng sản xuất"; break;
        case "OPC_B2/TKX_B2_02": Dv = "Kho thống kê hóa dược 2"; break;
        case "OPC_B2/TP_B1_CXL": Dv = "Kho thành phẩm Trụ sở chờ xử lý"; break;
        case "OPC_B2/TP_B1_NC": Dv = "Kho thành phẩm Nghiên Cứu điều phối"; break;
        case "OPC_B2/TP_B1_PHIEN": Dv = "Kho vị thuốc cổ truyền Trụ sở"; break;
        case "OPC_B2/TP_B1_PHIEN_CXL": Dv = "Kho vị thuốc cổ truyền trụ sở chờ xử lý"; break;
        case "OPC_B2/TP_B2_PHIEN": Dv = "Kho vị thuốc cổ truyền nhà máy"; break;
        case "OPC_B2/TP_B2_PHIEN_QC": Dv = "Kho vị thuốc cổ truyền nhà máy chờ QC"; break;
        case "OPC_B2/TP_B2_QC": Dv = "Kho Thành phẩm Điều phối chờ QC"; break;
        case "OPC_B2/VPP_B2": Dv = "Văn Phòng Phẩm"; break;
        case "OPC_B2/XD_B1_01": Dv = "OPC_B2/XD_B1_01-Kho xăng dầu"; break;
        case "OPC_CT/CXL_CT_CN": Dv = "Kho chờ xử lý - Cần Thơ"; break;
        case "OPC_CT/HKM_CT_CN": Dv = "Kho hàng khuyến mãi - Cần Thơ"; break;
        case "OPC_CT/TP_CT_CN": Dv = "Kho Thành Phẩm - Cần Thơ"; break;
        case "OPC_DN/CXL_DN_CN": Dv = "Kho chờ xử lý - Đà Nẵng"; break;
        case "OPC_DN/HKM_DN_CN": Dv = "Kho hàng khuyến mãi mua ngoài - Đà Nẵng"; break;
        case "OPC_DN/TP_DN_CN": Dv = "Kho Thành Phẩm - Đà Nẵng"; break;
        case "OPC_DN_03/CPC2": Dv = "CPC2"; break;
        case "OPC_HN/CXL_HN_CN": Dv = "Kho chờ xử lý - Hà Nội"; break;
        case "OPC_HN/HKM_HN_CN": Dv = "Kho hàng khuyến mãi mua ngoài - Hà Nội"; break;
        case "OPC_HN/TP_HN_CN": Dv = "Kho Thành phẩm - Hà Nội"; break;
        case "OPC_HN_03/HP1_HCN": Dv = "Cửa hàng HAPU _Chi Nhánh Hà Nôi"; break;
        case "OPC_HN_04/CPC1": Dv = "CPC1"; break;
        case "OPC_MD/CXL_MD_CN": Dv = "Kho chờ xử lý - Miền Đông"; break;
        case "OPC_MD/HKM_MD_CN": Dv = "Kho hàng khuyến mãi - Miền Đông"; break;
        case "OPC_MD/TP_MD_CN": Dv = "Kho Thành phẩm - Miền Đông"; break;
        case "OPC_NA/CXL_NA_CN": Dv = "Kho chờ xử lý - Nghệ An"; break;
        case "OPC_NA/HKM_NA_CN": Dv = "Kho hàng khuyến mãi - Nghệ An"; break;
        case "OPC_NA/TP_NA_CN": Dv = "Kho Thành Phẩm - Nghệ An"; break;
        case "OPC_NT/CXL_NT_CN": Dv = "Kho chờ xử lý - Nha Trang"; break;
        case "OPC_NT/HKM_NT_CN": Dv = "Kho hàng khuyến mãi - Nha Trang"; break;
        case "OPC_NT/TP_NT_CN": Dv = "Kho Thành Phẩm - Nha Trang"; break;
        case "OPC_RD/NCPT_RD": Dv = "Kho RD"; break;
        case "OPC_RD/PST_RD": Dv = "Kho dự án"; break;
        case "OPC_TG/CXL_TG_CN": Dv = "Kho chờ xử lý - Tiền Giang"; break;
        case "OPC_TG/HKM_TG_CN": Dv = "Kho hàng khuyến mãi - Tiền Giang"; break;
        case "OPC_TG/TP_TG_CN": Dv = "Kho Thành Phẩm - Tiền Giang"; break;
        case "OPC_TP/CXL_HCM_CN": Dv = "Kho chờ xử lý - Hồ Chí Minh"; break;
        case "OPC_TP/HKM_HCM_CN": Dv = "Kho hàng khuyến mãi - HCM"; break;
        case "OPC_TP/KKG_HCM_CN": Dv = "Kho ký gởi - Hồ Chí Minh"; break;
        case "OPC_TP/ONLINE_HCM": Dv = "Kho Online - Hồ Chí Minh"; break;
        case "OPC_TP/TP_HCM_CN": Dv = "Kho Thành phẩm - Hồ Chí Minh"; break;
        case "OPC_TP_03/CH1_HCM": Dv = "Kho cửa hàng số 1 - Phú Lâm"; break;
        case "OPC_TP_03/KOL_CH1_HCM": Dv = "Kho Online"; break;
        case "OPC_TP_04/CH2_HCM": Dv = "Kho cửa hàng số 2 - Phùng Hưng"; break;
        case "OPC_TP_04/HKM_CH2_HCM": Dv = "Kho hàng khuyến mãi - Phùng Hưng"; break;
        case "OPC_TP_05/ONLINE_HCM": Dv = "Kho cửa hàng Online HCM"; break;
        case "OPC_VT/CXL_VT_CN": Dv = "Kho chờ xử lý - Vũng tà"; break;
        case "OPC_VT/HKM_VT_CN": Dv = "Kho hàng khuyến mãi mua ngoài -Vũng Tàu"; break;
        case "OPC_VT/TP_VT_CN": Dv = "Kho Thành phẩm - Vũng tàu"; break;
    }


    var maVt = Request.Cookies["Ma_Vt"].Value;
    var tenVt = Request.Cookies["Ten_Vt"].Value;
    var options = new Dictionary<string, string[]>()
{
    { "OPC_CT", new string[] { "OPC_CT", "OPC_CT Chi Nhánh Cần Thơ" } },
    { "OPC_TG", new string[] { "OPC_TG", "OPC_TG Chi Nhánh Tiền Giang" } },
    { "OPC_DN", new string[] { "OPC_DN", "OPC_DN Chi Nhánh Đà Nẵng", "OPC_DN_03", "OPC2" } },
    { "OPC_HN", new string[] { "OPC_HN", "OPC_HN Chi Nhánh Hà Nội","OPC_HN_03", "Cửa hàng HAPU - Chi Nhánh Hà Nội", "OPC_HN_04", "OPC1" } },
    { "OPC_MD", new string[] { "OPC_MD", "OPC_MD Chi Nhánh Miền Đông"} },
    { "OPC_VT", new string[] { "OPC_VT", "OPC_VT Chi Nhánh Vũng Tàu"} },
    { "OPC_NT", new string[] { "OPC_NT", "OPC_VT Chi Nhánh Nha Trang"} },
    { "OPC_NA", new string[] { "OPC_NA", "OPC_NA Chi Nhánh Nghệ An"} },
    { "OPC_TP", new string[] { "OPC_TP", "OPC_TP Chi nhánh Hồ Chí Minh", "OPC_TP_03", "Cửa hàng phú lâm", "OPC_TP_04", "Cửa hàng phùng hưng", "OPC_TP_05", "Cửa hàng Online HCM" } },
    { "OPC", new string[] { "OPC_B1", "Văn phòng Tp.HCM", "OPC_B2", "Nhà máy Bình Dương", "OPC_B1_01020302", "Nhóm Cửa hàng sỉ Quận 10 HCM", "OPC_B1_01020303", "Nhóm Cửa hàng sỉ HAPU Hà Nội" } },
    { "OPC_B1", new string[] { "OPC_B1", "Văn phòng Tp.HCM", "OPC_B2", "Nhà máy Bình Dương", "OPC_B1_01020302", "Nhóm Cửa hàng sỉ Quận 10 HCM", "OPC_B1_01020303", "Nhóm Cửa hàng sỉ HAPU Hà Nội" } },
    // Thêm các trường hợp khác nếu cần
};

    // Lấy giá trị của cookie
    string cookieValue = Request.Cookies["MA_DVCS"].Value;

    // Tìm kiếm tùy chọn cho giá trị cookie
    string[] selectedOption = options.ContainsKey(cookieValue) ? options[cookieValue] : null;

    // Tạo mảng chứa giá trị và văn bản của các option
    string[] optionValues = null;
    string[] optionTexts = null;

    // Kiểm tra xem selectedOption có tồn tại và có đủ phần tử không
    if (selectedOption != null && selectedOption.Length >= 2)
    {
        // Lấy các giá trị và văn bản của option từ selectedOption
        optionValues = new string[selectedOption.Length / 2];
        optionTexts = new string[selectedOption.Length / 2];
        for (int i = 0; i < selectedOption.Length; i += 2)
        {
            optionValues[i / 2] = selectedOption[i];
            optionTexts[i / 2] = selectedOption[i + 1];
        }
    }





    var optionsKho = new Dictionary<string, string[]>()
{
    { "OPC_CT", new string[] { "OPC_CT/TP_CT_CN", "Kho Thành Phẩm - Cần Thơ", "OPC_CT/HKM_CT_CN", "Kho hàng khuyến mãi - Cần Thơ","","Tất Cả" } },
    { "OPC_TG", new string[] { "OPC_TG/TP_TG_CN", "Kho Thành Phẩm - Tiền Giang", "OPC_TG/HKM_TG_CN", "Kho hàng khuyến mãi - Tiền Giang","","Tất Cả" } },
    { "OPC_DN", new string[] { "OPC_DN/TP_DN_CN", "Kho Thành Phẩm - Đà Nẵng", "OPC_DN/HKM_DN_CN", "Kho hàng khuyến mãi mua ngoài - Đà Nẵng", "OPC_DN_03/CPC2", "CPC2","","Tất Cả"} },
    { "OPC_HN", new string[] { "OPC_HN/TP_HN_CN", "Kho Thành phẩm - Hà Nội", "OPC_HN/HKM_HN_CN", "Kho hàng khuyến mãi mua ngoài - Hà Nội", "OPC_HN_03/HP1_HCN", "Cửa hàng HAPU _Chi Nhánh Hà Nội", "OPC_HN_04/CPC1", "CPC1","","Tất Cả" } },
    { "OPC_MD", new string[] { "OPC_MD/TP_MD_CN", "Kho Thành phẩm - Miền Đông", "OPC_MD/HKM_MD_CN", "Kho hàng khuyến mãi - Miền Đông" } },
    { "OPC_VT", new string[] { "OPC_VT/TP_VT_CN", "Kho Thành phẩm - Vũng tàu", "OPC_VT/HKM_VT_CN", "Kho hàng khuyến mãi mua ngoài -Vũng Tàu","","Tất Cả" } },
    { "OPC_NT", new string[] { "OPC_NT/HKM_NT_CN", "Kho hàng khuyến mãi - Nha Trang", "OPC_NT/TP_NT_CN", "Kho Thành Phẩm - Nha Trang","","Tất Cả" } },
    { "OPC_NA", new string[] { "OPC_NA/TP_NA_CN", "Kho Thành Phẩm - Nghệ An", "OPC_NA/HKM_NA_CN", "Kho hàng khuyến mãi - Nghệ An","","Tất Cả" } },
    { "OPC_TP", new string[] { "OPC_TP/TP_HCM_CN", "Kho Thành phẩm - Hồ Chí Minh", "OPC_TP/HKM_HCM_CN", "Kho hàng khuyến mãi - HCM", "OPC_TP_03/CH1_HCM", "Kho cửa hàng số 1 - Phú Lâm", "OPC_TP_04/CH2_HCM", "Kho cửa hàng số 2 - Phùng Hưng", "OPC_TP_03/KOL_CH1_HCM", "Kho Online","","Tất Cả" } },
    { "OPC", new string[] { "OPC_B1/TP_B1_DP", "Kho thành phẩm Điều phối Trụ sở", "OPC_B1/TP_B1_CXL", "Kho thành phẩm Trụ sở chờ xử lý", "OPC_B1/TP_B1_PHIEN", "Kho vị thuốc cổ truyền Trụ sở", "OPC_B1/TP_B1_PHIEN_CXL", "Kho vị thuốc cổ truyền trụ sở chờ xử lý", "OPC_B1/KM_B1_01", "Kho hàng khuyến mãi","OPC_B2/TP_B2_DP", "Kho thành phẩm Điều phối Nhà Máy", "OPC_B2/TP_B2_CXL", "Kho thành phẩm Nhà Máy chờ xử lý", "OPC_B2/TP_B2_PHIEN", "Kho vị thuốc cổ truyền nhà máy", "OPC_B1_01020302/TP_B1_Q10", "Kho cửa hàng sỉ - Quận 10", "OPC_B1_01020302/HKM_B1_Q1", "Kho hàng khuyến mãi - Quận 10", "","Tất Cả" } },
    { "OPC_B1", new string[] { "OPC_B1/TP_B1_DP", "Kho thành phẩm Điều phối Trụ sở", "OPC_B1/TP_B1_CXL", "Kho thành phẩm Trụ sở chờ xử lý", "OPC_B1/TP_B1_PHIEN", "Kho vị thuốc cổ truyền Trụ sở", "OPC_B1/TP_B1_PHIEN_CXL", "Kho vị thuốc cổ truyền trụ sở chờ xử lý", "OPC_B1/KM_B1_01", "Kho hàng khuyến mãi","OPC_B2/TP_B2_DP", "Kho thành phẩm Điều phối Nhà Máy", "OPC_B2/TP_B2_CXL", "Kho thành phẩm Nhà Máy chờ xử lý", "OPC_B2/TP_B2_PHIEN", "Kho vị thuốc cổ truyền nhà máy", "OPC_B1_01020302/TP_B1_Q10", "Kho cửa hàng sỉ - Quận 10", "OPC_B1_01020302/HKM_B1_Q1", "Kho hàng khuyến mãi - Quận 10", "","Tất Cả" } },
    // Thêm các trường hợp khác nếu cần
};

    // Lấy giá trị của cookie
    string cookieValueKho = Request.Cookies["MA_DVCS"].Value;

    // Tìm kiếm tùy chọn cho giá trị cookie
    string[] selectedOptionKho = optionsKho.ContainsKey(cookieValueKho) ? optionsKho[cookieValueKho] : null;

    // Tạo mảng chứa giá trị và văn bản của các option
    string[] optionValuesKho = null;
    string[] optionTextsKho = null;

    // Kiểm tra xem selectedOption có tồn tại và có đủ phần tử không
    if (selectedOptionKho != null && selectedOptionKho.Length >= 2)
    {
        // Lấy các giá trị và văn bản của option từ selectedOption
        optionValuesKho = new string[selectedOptionKho.Length / 2];
        optionTextsKho = new string[selectedOptionKho.Length / 2];
        for (int i = 0; i < selectedOptionKho.Length; i += 2)
        {
            optionValuesKho[i / 2] = selectedOptionKho[i];
            optionTextsKho[i / 2] = selectedOptionKho[i + 1];
        }
    }

}
@using System.Data;
@using System.Globalization;
<!DOCTYPE html>
<html lang="en">

<head>



    <style>


        * {
            font-family: "Times New Roman";
        }

        a {
            text-decoration: none;
        }

        .container table {
            justify-content: center;
            align-items: center;
            height: 50vh;
            zoom: 90%;
            text-align: center;
        }

        .container canvas {
            justify-content: center;
            align-items: center;
            height: min-content;
            zoom: normal;
        }

        h3 {
            text-align: center;
            color: blue;
        }

        table, td, th {
            border: 1px solid black;
            align-items: center;
            margin-left: auto;
            margin-right: auto;
            height: 50px;
        }

        table {
            border-collapse: collapse;
        }

        .num {
            text-align: center;
            width: 100px;
        }

        .ten {
            text-align: left;
        }

        button {
            background-color: #2297f6;
            border: none;
            outline: none;
            padding: 5px;
            font-size: 30px;
            color: #ffffff;
            cursor: pointer;
            margin-top: 20px;
            text-align: center;
        }

        p {
            color: #ffffff;
        }



        canvas {
            width: 200px;
            height: 100px;
            text-align: center;
        }

        .tu_ngay {
            height: 35px;
            border-radius: 5px;
            border: 1px solid #dcdcdc;
            padding: 0px 10px;
            outline: none;
            Format: 'd-m-y';
        }

        .den_ngay {
            height: 35px;
            border-radius: 5px;
            border: 1px solid #dcdcdc;
            padding: 0px 10px;
            outline: none;
            Format: 'd-m-y';
        }



        div#chart {
            text-align: center;
            display: flex;
            /*         justify-content:;*/
            width: 50%;
            height: 300px;
        }

        .submit {
            height: 50px;
            background-color: silver;
            border: none;
            color: cadetblue;
            border-radius: 7px;
            font-size: 18px;
            font-weight: 600;
            margin-top: 20px;
            justify-content: center;
            align-items: center;
            transition: all 1s ease-in-out;
        }

            .submit:hover {
                background-color: darkcyan;
                color: #ffffff;
                transition: cubic-bezier(0.075, 0.82, 0.165, 1);
            }

        .form .locBC {
            display: flex;
            flex-direction: column;
            padding: 20px;
            width: 500px;
            height: 400px;
            float: left;
        }

        .form table {
            justify-content: center;
            align-items: center;
            height: 50vh;
            zoom: 90%;
            text-align: center;
        }

        .expandable {
            cursor: pointer;
        }

        .percent {
            width: 20%;
            text-align: right;
            text-align: center;
            background-color: #eee;
            background: linear-gradient(to right, #3399dd, #3399dd);
            background-size: 1% 100%;
            background-repeat: no-repeat;
        }



        #data {
            width: 100%;
            height: 150px;
            background: white;
            float: inline-start;
        }

        .dropdown-check-list {
            display: inline-block;
        }

            .dropdown-check-list .anchor {
                position: relative;
                cursor: pointer;
                display: inline-block;
                padding: 5px 50px 5px 10px;
                border: 1px solid #ccc;
            }

                .dropdown-check-list .anchor:after {
                    position: absolute;
                    content: "";
                    border-left: 2px solid black;
                    border-top: 2px solid black;
                    padding: 5px;
                    right: 10px;
                    top: 20%;
                    -moz-transform: rotate(-135deg);
                    -ms-transform: rotate(-135deg);
                    -o-transform: rotate(-135deg);
                    -webkit-transform: rotate(-135deg);
                    transform: rotate(-135deg);
                }

                .dropdown-check-list .anchor:active:after {
                    right: 8px;
                    top: 21%;
                }

            .dropdown-check-list ul.items {
                padding: 2px;
                display: none;
                margin: 0;
                border: 1px solid #ccc;
                border-top: none;
            }

                .dropdown-check-list ul.items li {
                    list-style: none;
                }

            .dropdown-check-list.visible .anchor {
                color: #0094ff;
            }

            .dropdown-check-list.visible .items {
                display: block;
            }

        .custom-combobox-container {
            position: relative;
            width: 100%;
            outline: none;
            border: none;
        }

        .custom-combobox {
            width: 100%;
            display: flex;
            align-items: center;
            border: 1px solid rgb(199, 199, 199);
            padding: 10px;
        }

            .custom-combobox input[type="text"] {
                width: 95%;
                border: none;
                outline: none;
                background: none;
            }

        .options-container {
            position: absolute;
            width: 100%;
            z-index: 100;
            border: 1px solid rgb(204, 204, 204);
            border-top: none;
            display: none;
            height: 150px;
            overflow-y: scroll;
        }

            .options-container label {
                display: block;
                cursor: pointer;
                padding: 5px;
                margin-top: 5px;
                user-select: none;
            }

                .options-container label:hover {
                    background: rgb(255, 255, 255);
                }

            .options-container::-webkit-scrollbar {
                width: 8px;
            }

            .options-container::-webkit-scrollbar-thumb {
                background-color: white;
            }

        .sidebar {
            position: relative;
            top: 0;
            left: 0;
            height: 50px;
            width: 200px;
            transition: all 0.5s ease;
        }

        .myInput {
            text-align: center;
            height: auto;
            width: 1000px;
            padding: 10px;
        }

        .container {
            text-align: center;
        }

        .data_table {
            width: max-content;
        }

        .bieu_do {
            padding: 10px;
            margin: 10%;
            text-align: center;
            width: 200px;
            font-size: 16px;
            font-weight: 600;
            color: #fff;
            cursor: pointer;
            margin: 20px;
            height: 55px;
            text-align: center;
            border: none;
            background-size: 300% 100%;
            border-radius: 10px;
            moz-transition: all .4s ease-in-out;
            -o-transition: all .4s ease-in-out;
            -webkit-transition: all .4s ease-in-out;
            transition: all .4s ease-in-out;
        }

            .bieu_do:hover {
                background-position: 100% 0;
                moz-transition: all .4s ease-in-out;
                -o-transition: all .4s ease-in-out;
                -webkit-transition: all .4s ease-in-out;
                transition: all .4s ease-in-out;
            }

            .bieu_do:focus {
                outline: none;
            }

        .bieu_do {
            background-image: linear-gradient(to right, #0ba360, #3cba92, #30dd8a, #2bb673);
            box-shadow: 0 4px 15px 0 rgba(23, 168, 108, 0.75);
        }

        .chart {
            margin: 20px 0px 0px 0px;
        }

        .text-loading {
            position: fixed;
            top: 60%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 13px;
            color: black;
            z-index: 2;
            background-color: rgba(255, 255, 255, 0.9);
            padding: 5px 10px;
            display: none;
        }

        .custom-checkbox {
            margin-top: 10px;
            display: inline-block;
            position: relative;
            padding-left: 30px;
            margin-right: 15px;
            cursor: pointer;
        }

            .custom-checkbox input {
                position: absolute;
                opacity: 0;
                cursor: pointer;
            }

        .checkmark {
            position: absolute;
            top: 0;
            left: 0;
            height: 25px;
            width: 25px;
            border: 2px solid black;
            background-color: #ffffff;
        }

        .custom-checkbox:hover input ~ .checkmark {
            background-color: #ccc;
        }

        .custom-checkbox input:checked ~ .checkmark {
            background-color: #2196F3;
        }

        .checkmark:after {
            content: "";
            position: absolute;
            display: none;
        }

        .custom-checkbox input:checked ~ .checkmark:after {
            display: block;
        }

        .custom-checkbox .checkmark:after {
            left: 9px;
            top: 5px;
            width: 5px;
            height: 10px;
            border: solid white;
            border-width: 0 3px 3px 0;
            transform: rotate(45deg);
        }

        .checkContainer {
            height: 300px;
            overflow: auto;
            scrollbar-width: none;
        }

            .checkContainer::-webkit-scrollbar {
                width: 0.2em;
                background-color: transparent;
            }

        .tabs {
            display: inline-block;
            /* bottom: 0;
            left: 0;
            right: 0;*/
            width: 300vh;
            height: 50px;
            /* margin: 15px auto;*/
            border-bottom: 1px solid #DAE0E7;
            background: #F9F9F9;
            list-style-type: none;
            padding: 0px 12px 0;
        }

        a {
            text-decoration: none;
            color: #333;
        }

        .tab {
            float: left;
            height: 44px;
            margin: 0 8px -1px 0;
            border: 1px solid #DAE0E7;
            background: #F9F9F9;
            border-radius: 0px 0px 0 0;
            overflow: hidden;
        }

            .tab, .tab a {
                transition: all .25s;
            }

                .tab a {
                    display: inline-block;
                }

                    .tab a:first-child {
                        padding: 12px 2px 12px 16px;
                        white-space: nowrap;
                    }

                .tab.tabClosed, .tab.tabClosed a:first-child {
                    margin-right: 0;
                    border-width: 0;
                }

                .tab.tabClosed {
                    width: 0 !important; /* use important because we need to set the width of tabs in javascript in order to be able to animate them to 0 */
                }

                    .tab.tabClosed a {
                        opacity: 0;
                    }

        .closeTab:hover {
            background: #DAE0E7;
        }

        .tab-control {
            z-index: 1;
            position: fixed;
        }

            .tab-control ul {
                position: absolute;
                bottom: 0px;
                /* left:300px;*/
            }

                .tab-control ul li {
                    text-align: center;
                }

        .closeTab {
            position: relative;
            display: inline-block;
            vertical-align: middle;
            margin-left: 10px; /* Điều chỉnh khoảng cách với h4 */
        }

        .closeIcon {
            display: inline-block;
            width: 30px;
            height: 25px;
            border-radius: 50%;
            background-color: white;
            color: black; /* Màu chữ x */
            text-align: center;
            line-height: 25px;
        }

        .tab.active {
            background-color: cornflowerblue; /* Màu nền tab khi active */
            color: #fff; /* Màu chữ khi active */
        }

        .tab.selected-tab {
            pointer-events: none;
            background-color: #3763a3; /* Màu nền của tab */
        }

            .tab.selected-tab a {
                color: white /* Màu nền của tab */
            }

            .tab.selected-tab .closeTab {
                pointer-events: auto;
            }

        .data_table {
            max-height: 100%;
            overflow: auto;
        }

            .data_table thead {
                position: sticky;
                top: 0;
                z-index: 100;
            }

        /*  .bold-row td:nth-child(3) {
            font-weight: bold;
        }*/

        .bold-row td:nth-child(4) {
            font-weight: bold;
        }

        .bold-row td:nth-child(5) {
            font-weight: bold;
        }

        .bold-row td:nth-child(6) {
            font-weight: bold;
        }

        .bold-row td:nth-child(7) {
            font-weight: bold;
        }

        .bold-row td:nth-child(8) {
            font-weight: bold;
        }

        .bold-row td:nth-child(9) {
            font-weight: bold;
        }

        .num {
            mso-number-format: "\#\,\#\#0\.00_ \;\[Red\]\-\#\,\#\#0\.00\ ";
        }

        .date {
            mso-number-format: "Medium Date";
        }

        .select-btn2 {
            position: relative;
        }

        #nhomtheoselect2 {
            display: none; /* Ẩn dropdown ban đầu */
            position: absolute;
            top: 100%;
            left: 0;
            width: 100%;
            z-index: 1;
            white-space: nowrap; /* Ngăn ngừa text quá dài bị xuống dòng */
            overflow-x: auto; /* Hiển thị thanh cuộn khi nội dung quá dài */
            max-height: 200px; /* Đặt chiều cao tối đa của dropdown */
            box-sizing: border-box;
        }

        .expanded {
            transform: rotate(180deg);
        }

        .expandable-content {
            display: none;
        }

        .expandable-content_detail {
            display: none;
        }

        .expandable-content1563 {
            display: none;
        }

        .expandable-content1561 {
            display: none;
        }

        .expandable-content1571 {
            display: none;
        }

        .expandable-content1572 {
            display: none;
        }

        .expandable-content_detail1563 {
            display: none;
        }

        .expandable-content_detail1561 {
            display: none;
        }

        .expandable-content_detail1571 {
            display: none;
        }

        .expandable-content_detail1572 {
            display: none;
        }

        .expandable-icon {
            cursor: pointer;
            transition: transform 0.3s;
        }

        .expanded {
            transform: rotate(180deg);
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.14.0/js/bootstrap-select.min.js"></script>
    <script type="text/javascript" src="Scripts/table2excel.js"></script>


    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>TỔNG HỢP NHẬP XUẤT TỒN THEO LÔ</title>
    <meta content="" name="description">
    <meta content="Author" name="MJ Maraz">
    <link href="~/assets/images/favicon.png" rel="icon">
    <link href="~/assets/images/favicon.png" rel="apple-touch-icon">
    <!-- Google Fonts -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
    <link href='https://unpkg.com/boxicons@2.0.7/css/boxicons.min.css' rel='stylesheet'>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.1/css/all.min.css" />
    <link href='https://unpkg.com/boxicons@2.0.7/css/boxicons.min.css' rel='stylesheet'>
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css" integrity="sha384-DyZ88mC6Up2uqS4h/KRgHuoeGwBcD4Ng9SiP4dIRy0EXTlnuz47vAwmeGwVChigm" crossorigin="anonymous" />
    <!-- ========================================================= -->
    <!-- ========================================================= -->


    <link rel="stylesheet" href="~/assets/css/bootstrap.min.css">
    <link rel="stylesheet" href="~/assets/css/datatables.min.css">
    <link rel="stylesheet" href="~/assets/css/style.css">
    <link rel="stylesheet" href="~/Styles/loader.css">
</head>
<!-- =============== Design & Develop By = MJ MARAZ   ====================== -->

<body style="background-color: #e0e8ee ">
    <div class="loader" style="z-index:1"></div>

    <div class="sidebar">
        <div class="logo-details">

        </div>
        <ul class="nav-links" style="justify-content: center; display: flex; margin-left: 10px; width: 350px">
            <li>
                <form id="dateForm" action="TongNhapXuatTonTheoLo" method="post" onsubmit="handleFormSubmit(event)">
                    <div id="locBC">
                        <span id="spanText" class="text-loading">[usp_TongHopNhapXuatTonTheoKho_SAP]</span>
                        <a>Từ Ngày</a><br /><br />
                        <input class="tu_ngay" placeholder="Từ Ngày" id="tu_ngay" name="From_date" type="date" format="YYYY-MM-DD" value="@Request.Cookies["From_date"].Value" />
                        <script>$("#tu_ngay").datetimepicker({ timepicker: false, format: 'Y-m-d' });</script><br /><br />
                        <a>Đến Ngày</a><br /><br />
                        <input class="den_ngay" id="den_ngay" placeholder=" Đến Ngày" name="To_date" type="DATE" format="YYYY-MM-DD" value="@Request.Cookies["To_date"].Value" /><br /><br />
                        <script>$("#den_ngay").datetimepicker({ timepicker: false, format: 'Y-m-d' });</script>
                    </div>
                    <h6>Site</h6>
                    @if (Request.Cookies["UserName"].Value == "Admin" || Request.Cookies["UserName"].Value == "OPCADMIN" || Request.Cookies["UserName"].Value == "OPCTCKT001" || Request.Cookies["UserName"].Value == "opctckt001" || Request.Cookies["Ma_Dvcs"].Value == "")
                    {

                        <div class="select-btn" style="width:100px;margin-top:10px">
                            <select name="Chitiet" id="chitietselect" onchange="saveSelectedValueToCookie3()">
                                <option value="" style="background-color: #020024;color:white">Chọn giá trị</option>
                                <option value="OPC_CT">OPC_CT Chi Nhánh Cần Thơ</option>

                                <option value="OPC_TG">OPC_TG Chi Nhánh Tiền Giang</option>
                                <option value="OPC_MD">OPC_MD Chi Nhánh Miền Đông</option>
                                <option value="OPC_TP">OPC_TP Chi Nhánh Hồ Chí Minh</option>
                                <option value="OPC_TP_03">OPC_TP_03 Chi Nhánh Hồ Chí Minh</option>
                                <option value="OPC_TP_04">OPC_TP_04 Cửa hàng phùng hưng</option>
                                <option value="OPC_TP_05">OPC_TP_05 Cửa hàng Online HCM</option>
                                <option value="OPC_VT">OPC_VT Chi Nhánh Vũng Tàu</option>
                                <option value="OPC_NT">OPC_NT Chi Nhánh Nha Trang</option>
                                <option value="OPC_DN">OPC_DN Chi Nhánh Đà Nẵng</option>
                                <option value="OPC_DN_03">OPC_DN_03 OPC2</option>
                                <option value="OPC_NA">OPC_NA Chi Nhánh Nghệ An</option>
                                <option value="OPC_HN">OPC_HN Chi Nhánh Hà Nội</option>
                                <option value="OPC_HN_03">OPC_HN_03 Nhóm CH HAPU Hà Nội</option>
                                <option value="OPC_HN_04">OPC_HN_04 OPC1</option>
                                <option value="OPC_B1">OPC_B1 Văn phòng Tp.HCM</option>
                                <option value="OPC_B2">OPC_B2 Nhà máy Bình Dương</option>
                                <option value="OPC_B1_01020302">OPC_B1_01020302 Nhóm CH sỉ Q10 HCM</option>
                                <option value="OPC_B1_01020303">OPC_B1_01020303 Nhóm CH sỉ HAPU HN</option>
                            </select>
                        </div>
                    }
                    else
                    {
                        <div class="select-btn" style="margin-top:10px">
                            <select name="Chitiet" id="chitietselect" onchange="saveSelectedValueToCookie3()">
                                @if (optionValues != null)
                                {
                                    for (int i = 0; i < optionValues.Length; i++)
                                    {
                                        <option value="@optionValues[i]">@optionTexts[i]</option>
                                    }
                                }
                            </select>
                        </div>

                    }


                    <h6>Kho</h6>
                    @if (Request.Cookies["UserName"].Value == "Admin" || Request.Cookies["UserName"].Value == "OPCADMIN" || Request.Cookies["UserName"].Value == "OPCTCKT001" || Request.Cookies["UserName"].Value == "opctckt001" || Request.Cookies["Ma_Dvcs"].Value == "")
                    {
                        <div class="select-btn2" style="width:350px;margin-top:10px">
                            <input type="text" id="searchInput" oninput="filterDropdown()" placeholder="Tìm kiếm..." autocomplete="off">
                            <select name="Nhom" id="nhomtheoselect2" size="5" onchange="saveSelectedValueToCookie2()">
                                @*<option value="" style="background-color: #020024;color:white">Tất Cả</option>*@
                                <option value="OPC_B1/TP_B1_DP">OPC_B1/TP_B1_DP Kho thành phẩm ĐP trụ sở</option>
                                <option value="OPC_B2/TP_B2_DP">OPC_B2/TP_B2_DP Kho thành phẩm ĐP nhà máy</option>
                                <option value="OPC_B1/KM_B1_01"> OPC_B1/KM_B1_01 Kho hàng khuyến mãi</option>
                                <option value="OPC_B1/TP_B1_CXL">OPC_B1/TP_B1_CXL Kho thành phẩm Trụ sở chờ xử lý</option>
                                <option value="OPC_B1/TP_B1_NC">OPC_B1/TP_B1_NC Kho thành phẩm Nghiên Cứu điều phối</option>
                                <option value="OPC_B1/TP_B1_PHIEN">OPC_B1/TP_B1_PHIEN Kho vị thuốc cổ truyền Trụ sở</option>
                                <option value="OPC_B1/TP_B1_PHIEN_CXL">OPC_B1/TP_B1_PHIEN_CXL Kho vị thuốc cổ truyền trụ sở chờ xử lý</option>
                                <option value="OPC_B1/XD_B1_01">OPC_B1/XD_B1_01 Kho Xăng dầu</option>
                                <option value="OPC_B1_01020302/HKM_B1_Q1">OPC_B1_01020302/HKM_B1_Q1 Kho hàng khuyến mãi - Quận 10</option>
                                <option value="OPC_B1_01020302/TP_B1_Q10">OPC_B1_01020302/TP_B1_Q10 Kho cửa hàng sỉ - Quận 10</option>
                                <option value="OPC_B1_01020303/TP_B1_HAPU">OPC_B1_01020303/TP_B1_HAPU Kho quầy 427 Hapu - Hà Nội</option>
                                <option value="OPC_B1_01020303/TP_CN_HAPU"> /TP_CN_HAPUKho quầy Hapu tại Chi nhánh</option>
                                <option value="OPC_B2/BB_B2_01">OPC_B2/BB_B2_01 Kho bao bì</option>
                                <option value="OPC_B2/BB_B2_HD2">OPC_B2/BB_B2_HD2 Kho Bao bì hóa dược 2</option>
                                <option value="OPC_B2/BHLD_B2">OPC_B2/BHLD_B2 Kho bảo hộ lao động</option>
                                <option value="OPC_B2/CB_B2_01">OPC_B2/CB_B2_01 Kho chế biến</option>
                                <option value="OPC_B2/CB_B2_02">OPC_B2/CB_B2_02 Kho chế biến Chờ xử lý</option>
                                <option value="OPC_B2/CB_B2_HD2">OPC_B2/CB_B2_HD2 Kho Chế biến hóa dược 2</option>
                                <option value="OPC_B2/CB_B2_HD2_02">OPC_B2/CB_B2_HD2_02 Kho Chế biến hóa dược 2 chờ xử lý</option>
                                <option value="OPC_B2/CCDC_B2">OPC_B2/CCDC_B2 Kho công cụ dụng cụ</option>
                                <option value="OPC_B2/DL_B2_01">OPC_B2/DL_B2_01 Kho dược liệu</option>
                                <option value="OPC_B2/DL_B2_PHIEN">OPC_B2/DL_B2_PHIEN Kho dược liệu phiến</option>
                                <option value="OPC_B2/DP_DD_01">OPC_B2/DP_DD_01 Kho Điều Phối Đi Đường</option>
                                <option value="OPC_B2/HD_B2_01">OPC_B2/HD_B2_01 Kho hóa dược</option>
                                <option value="OPC_B2/HD_B2_HD2">OPC_B2/HD_B2_HD2 Kho Nguyên liệu hóa dược 2</option>
                                <option value="OPC_B2/HKM_B1_01">OPC_B2/HKM_B1_01 Kho hàng khuyến mãi - Điều phối</option>
                                <option value="OPC_B2/NCPT_B2">OPC_B2/NCPT_B2 Kho RD</option>
                                <option value="OPC_B2/PTTT_B2">OPC_B2/PTTT_B2 Phụ Tùng Thay Thế</option>
                                <option value="OPC_B2/TKX_B2_01">OPC_B2/TKX_B2_01 Kho thống kê xưởng sản xuất</option>
                                <option value="OPC_B2/TKX_B2_02">OPC_B2/TKX_B2_02 Kho thống kê hóa dược 2</option>
                                <option value="OPC_B2/TP_B1_CXL">OPC_B2/TP_B1_CXL Kho thành phẩm Trụ sở chờ xử lý</option>
                                <option value="OPC_B2/TP_B2_CXL">OPC_B2/TP_B2_CXL Kho thành phẩm Nhà máy chờ xử lý</option>
                                <option value="OPC_B2/TP_B1_NC">OPC_B2/TP_B1_NC Kho thành phẩm Nghiên Cứu điều phối</option>
                                <option value="OPC_B2/TP_B1_PHIEN">OPC_B2/TP_B1_PHIEN Kho vị thuốc cổ truyền Trụ sở</option>
                                <option value="OPC_B2/TP_B1_PHIEN_CXL">OPC_B2/TP_B1_PHIEN_CXL Kho vị thuốc cổ truyền trụ sở chờ xử lý</option>
                                <option value="OPC_B2/TP_B2_PHIEN">OPC_B2/TP_B2_PHIEN Kho vị thuốc cổ truyền nhà máy</option>
                                <option value="OPC_B2/TP_B2_PHIEN_QC">OPC_B2/TP_B2_PHIEN_QC Kho vị thuốc cổ truyền nhà máy chờ QC</option>
                                <option value="OPC_B2/TP_B2_QC">OPC_B2/TP_B2_QC Kho Thành phẩm Điều phối chờ QC</option>
                                <option value="OPC_B2/VPP_B2">OPC_B2/VPP_B2 Văn Phòng Phẩm</option>
                                <option value="OPC_B2/XD_B1_01">OPC_B2/XD_B1_01-Kho xăng dầu</option>
                                <option value="OPC_CT/CXL_CT_CN">OPC_CT/CXL_CT_CN Kho chờ xử lý - Cần Thơ</option>
                                <option value="OPC_CT/HKM_CT_CN">OPC_CT/HKM_CT_CN Kho hàng khuyến mãi - Cần Thơ</option>
                                <option value="OPC_CT/TP_CT_CN">OPC_CT/TP_CT_CN Kho Thành Phẩm - Cần Thơ</option>
                                <option value="OPC_DN/CXL_DN_CN">OPC_DN/CXL_DN_CN Kho chờ xử lý - Đà Nẵng</option>
                                <option value="OPC_DN/HKM_DN_CN">OPC_DN/HKM_DN_CN Kho hàng khuyến mãi mua ngoài - Đà Nẵng</option>
                                <option value="OPC_DN/TP_DN_CN">OPC_DN/TP_DN_CN Kho Thành Phẩm - Đà Nẵng</option>
                                <option value="OPC_DN_03/CPC2">OPC_DN_03/CPC2 CPC2</option>
                                <option value="OPC_HN/CXL_HN_CN">OPC_HN/CXL_HN_CN Kho chờ xử lý - Hà Nội</option>
                                <option value="OPC_HN/HKM_HN_CN">OPC_HN/HKM_HN_CN Kho hàng khuyến mãi mua ngoài - Hà Nội</option>
                                <option value="OPC_HN/TP_HN_CN">OPC_HN/TP_HN_CN Kho Thành phẩm - Hà Nội</option>
                                <option value="OPC_HN_03/HP1_HCN">OPC_HN_03/HP1_HCN Cửa hàng HAPU _Chi Nhánh Hà Nôi</option>
                                <option value="OPC_HN_04/CPC1">OPC_HN_04/CPC1 CPC1</option>
                                <option value="OPC_MD/CXL_MD_CN">OPC_MD/CXL_MD_CN Kho chờ xử lý - Miền Đông</option>
                                <option value="OPC_MD/HKM_MD_CN">OPC_MD/HKM_MD_CN Kho hàng khuyến mãi - Miền Đông</option>
                                <option value="OPC_MD/TP_MD_CN">OPC_MD/TP_MD_CN Kho Thành phẩm - Miền Đông</option>
                                <option value="OPC_NA/CXL_NA_CN">OPC_NA/CXL_NA_CN Kho chờ xử lý - Nghệ An</option>
                                <option value="OPC_NA/HKM_NA_CN">OPC_NA/HKM_NA_CN Kho hàng khuyến mãi - Nghệ An</option>
                                <option value="OPC_NA/TP_NA_CN">OPC_NA/TP_NA_CN Kho Thành Phẩm - Nghệ An</option>
                                <option value="OPC_NT/CXL_NT_CN">OPC_NT/CXL_NT_CN Kho chờ xử lý - Nha Trang</option>
                                <option value="OPC_NT/HKM_NT_CN">OPC_NT/HKM_NT_CN Kho hàng khuyến mãi - Nha Trang</option>
                                <option value="OPC_NT/TP_NT_CN">OPC_NT/TP_NT_CN Kho Thành Phẩm - Nha Trang</option>
                                <option value="OPC_RD/NCPT_RD">OPC_RD/NCPT_RD Kho RD</option>
                                <option value="OPC_RD/PST_RD">OPC_RD/PST_RD Kho dự án</option>
                                <option value="OPC_TG/CXL_TG_CN">OPC_TG/CXL_TG_CN Kho chờ xử lý - Tiền Giang</option>
                                <option value="OPC_TG/HKM_TG_CN">OPC_TG/HKM_TG_CN Kho hàng khuyến mãi - Tiền Giang</option>
                                <option value="OPC_TG/TP_TG_CN">OPC_TG/TP_TG_CN Kho Thành Phẩm - Tiền Giang</option>
                                <option value="OPC_TP/CXL_HCM_CN">OPC_TP/CXL_HCM_CN Kho chờ xử lý - Hồ Chí Minh</option>
                                <option value="OPC_TP/HKM_HCM_CN">OPC_TP/HKM_HCM_CN Kho hàng khuyến mãi - HCM</option>
                                <option value="OPC_TP/KKG_HCM_CN">OPC_TP/KKG_HCM_CN Kho ký gởi - Hồ Chí Minh</option>
                                <option value="OPC_TP/ONLINE_HCM">OPC_TP/ONLINE_HCM Kho Online - Hồ Chí Minh</option>
                                <option value="OPC_TP/TP_HCM_CN">OPC_TP/TP_HCM_CN Kho Thành phẩm - Hồ Chí Minh</option>
                                <option value="OPC_TP_03/CH1_HCM">OPC_TP_03/CH1_HCM Kho cửa hàng số 1 - Phú Lâm</option>
                                <option value="OPC_TP_03/KOL_CH1_HCM">OPC_TP_03/KOL_CH1_HCM Kho Online</option>
                                <option value="OPC_TP_04/CH2_HCM">OPC_TP_04/CH2_HCM Kho cửa hàng số 2 - Phùng Hưng</option>
                                <option value="OPC_TP_04/HKM_CH2_HCM">OPC_TP_04/HKM_CH2_HCM Kho hàng khuyến mãi - Phùng Hưng</option>
                                <option value="OPC_TP_05/ONLINE_HCM">OPC_TP_05/ONLINE_HCM Kho cửa hàng Online HCM</option>
                                <option value="OPC_VT/CXL_VT_CN">OPC_VT/CXL_VT_CN Kho chờ xử lý - Vũng tàu</option>
                                <option value="OPC_VT/HKM_VT_CN">OPC_VT/HKM_VT_CN Kho hàng khuyến mãi mua ngoài -Vũng Tàu</option>
                                <option value="OPC_VT/TP_VT_CN">OPC_VT/TP_VT_CN Kho Thành phẩm - Vũng tàu</option>



                            </select>
                        </div>
                    }
                    else
                    {


                        <div class="select-btn4" style="width:300px;margin-top:10px">
                            @*<input type="text" id="searchInput" oninput="filterDropdown()" placeholder="Tìm kiếm..." autocomplete="off">*@
                            <select name="Nhom" id="nhomtheoselect4" onchange="saveSelectedValueToCookie4()">
                                <option value="">Chọn giá trị</option>
                                @if (optionValuesKho != null)
                                {
                                    for (int i = 0; i < optionValuesKho.Length; i++)
                                    {
                                        <option value="@optionValuesKho[i]">@optionTextsKho[i]</option>
                                    }
                                }


                            </select>
                        </div>
                    }

                    <a>Vật Tư</a><br />
                    <input type="text" id="dropdownInputVT" list="dropdownListVT" placeholder="Tìm kiếm Vật Tư">
                    <datalist id="dropdownListVT">
                        @foreach (var item in ViewBag.DataVT)
                        {
                            <option value="@item.Ma_Vt" data-TenVt="@item.Ten_Vt" data-maVT="@item.Ma_Vt">@item.Ten_Vt</option>
                        }
                    </datalist>
                    <input type="hidden" name="Ma_Vt" id="selectedOptionVT">
                    <br />
                    <div>
                        <button class="submit" type="submit" id="runReportButton" onclick="runReport();saveNgay()">
                            Chạy Báo Cáo
                        </button>

                    </div>

                </form>
                <div style="display:flex">
                    @*<button id="exportbutton"style="border-radius: 10px; margin-bottom: 10px;margin-top:10px; background-color: #aec9e0; color: #3483bd ">Xuất Excel</button>*@
                    <button style="border-radius: 10px; margin-left: 10px; margin-bottom: 10px; margin-top: 10px; background-color: #aec9e0; color: #3483bd" onclick="exportToExcel()">Xuất Excel</button>

                    <button onclick="printPage()" style="border-radius: 10px; margin-left: 10px; margin-bottom: 10px;margin-top:10px; background-color: #aec9e0; color: #3483bd;padding:10px ">
                        Print
                    </button>
                </div>
                <!--<div style="display:flex">-->
                @*<button id="exportbutton"style="border-radius: 10px; margin-bottom: 10px;margin-top:10px; background-color: #aec9e0; color: #3483bd ">Xuất Excel</button>*@
                <!--<button style="border-radius: 10px; margin-bottom: 10px;margin-top:10px; background-color: #aec9e0; color: #3483bd " onclick="exportToExcel()">-->
                @*<a onclick="return ExcellentExport.excel(this, 'example', 'Sheet 1');" download="SoQuyTienMat.xls" style="color: #3483bd">Xuất Excel </a>*@
                <!--Xuất Excel
                    </button>
                    <button onclick="printPage()" style="border-radius: 10px; margin-left: 10px; margin-bottom: 10px;margin-top:10px; background-color: #aec9e0; color: #3483bd;padding:10px ">
                        <i class="fa-solid fa-print">Print</i>
                    </button>
                </div>-->
                @*<a download="somedata.xls"
                       href="#"
                       onclick="return ExcellentExport.excel(this, 'example', 'Sheet Name Here');">
                        Export table to Excel
                    </a>*@
            </li>
        </ul>
    </div>


    <header class="header_part" style="background-color: #aec9e0; color: #3483bd ">
        @if (Request.Cookies["UserName"].Value == "Admin-cnct" || Request.Cookies["UserName"].Value == "Admin-cntg" || Request.Cookies["UserName"].Value == "Admin-cnmd" || Request.Cookies["UserName"].Value == "Admin-cnh1" || Request.Cookies["UserName"].Value == "Admin-cnvt"
              || Request.Cookies["UserName"].Value == "Admin-cnnt" || Request.Cookies["UserName"].Value == "Admin - cndn" || Request.Cookies["UserName"].Value == "Admin - cnna" || Request.Cookies["UserName"].Value == "Admin - cnhn" && Request.Cookies["UserName"].Value == "admin-cnct" || Request.Cookies["UserName"].Value == "admin-cntg" || Request.Cookies["UserName"].Value == "admin-cnmd" || Request.Cookies["UserName"].Value == "admin-cnh1" || Request.Cookies["UserName"].Value == "admin-cnvt"
              || Request.Cookies["UserName"].Value == "admin-cnnt" || Request.Cookies["UserName"].Value == "admin - cndn" || Request.Cookies["UserName"].Value == "admin - cnna" || Request.Cookies["UserName"].Value == "admin - cnhn")
        {



            <a href="/Home/About1" style="cursor:pointer">
                <img src="~/Images/opc.png" style="height:60px;width:60px;margin-left:10px">
            </a>
        }
        else
        {
            <a href="/Home/About" style="cursor:pointer">
                <img src="~/Images/opc.png" style="height:60px;width:60px;margin-left:10px">
            </a>
        }
        <h4 style="color:#3483bd">TỔNG HỢP NHẬP XUẤT TỒN THEO KHO</h4>
        <h4 style="color:#3483bd">Từ @formattedFromDate đến @formattedToDate</h4>
        <h6 style="color:#3483bd;font-weight:bold">@Request.Cookies["Ma_Dv"].Value  @Dv</h6>
    </header>
    <!-- =======  Data-Table  = Start  ========================== -->

    <div class="container" style="margin-left:200px">


        <div class="row">
            <div class="col-12">
                @*<div class="search-container">

                        <span>Search: <input type="Text" name="" id="myInput" placeholder="Tìm kiếm" onkeyup="searchFun()"></span>
                        <div class="search"></div>
                    </div>*@
                <div class="data_table" style="max-height:1500px;width:1200px">
                    <h6 style="font-weight:bold">@maVt - @tenVt</h6>
                    <table id="example" class="table table-striped table-bordered" data-excel-name="Sheet 1">
                        <thead class="table-dark" id="head">
                            <tr>
                                <th>Mã Kho</th>
                                <th>Mã Vật Tư<br />Product ID</th>
                                <th>Tên Vật Tư<br />Product Name</th>
                                <th>Số Lô<br />Identified Stock ID</th>
                                <th>Hạn Dùng</th>
                                <th>Số Lượng Đầu Kỳ<br />Opening Qty</th>
                                <th>Số Lượng Nhập<br /> Increasing Qty</th>
                                <th>Số Lượng Xuất<br />Decreasing Qty </th>
                                <th>Số Lượng Cuối Kỳ<br />Ending Qty</th>

                            </tr>

                        </thead>
                        <tbody>
                            @{ // Biến tạm để lưu trữ tổng của mỗi loại Ma_Vt
                                decimal totalSoLuongDK = 0;
                                decimal totalSoLuongNhap = 0;
                                decimal totalSoLuongXuat = 0;
                                decimal totalSoLuongCK = 0;
                                string currentMa_Vt = "";
                                string currentMa_Kho = "";
                            }

                            @foreach (DataRow row in Model.Tables[0].Rows)
                            {
                                if (currentMa_Kho != row["Ma_Kho"].ToString())

                                {
                                }
                                if (currentMa_Vt != row["Ma_Vt"].ToString())
                                {
                                    // Nếu Ma_Vt của hàng hiện tại khác với Ma_Vt của hàng trước đó,
                                    // đó là điểm dừng của một nhóm Ma_Vt, tính tổng và gán vào dòng tổng cộng
                                    if (!string.IsNullOrEmpty(currentMa_Vt) && (totalSoLuongCK > 0 || totalSoLuongNhap > 0 || totalSoLuongXuat > 0 || totalSoLuongCK > 0))
                                    {

                                        //if (totalSoLuongCK == 0 && totalSoLuongNhap == 0 && totalSoLuongXuat == 0 && totalSoLuongCK == 0)
                                        //{
                            <tr style="background-color:lightgray">
                                <td></td>
                                <td style="font-weight:bold">@currentMa_Vt</td>
                                <td></td>
                                <td></td>
                                <td style="font-weight:bold">Tổng:</td>
                                <td style="text-align:right;font-weight:bold"> @String.Format(System.Globalization.CultureInfo.GetCultureInfo("vi-VN"), "{0:c}", totalSoLuongDK).Replace("₫", "")</td>
                                <td style="text-align:right;font-weight:bold"> @String.Format(System.Globalization.CultureInfo.GetCultureInfo("vi-VN"), "{0:c}", totalSoLuongNhap).Replace("₫", "") </td>
                                <td style="text-align:right;font-weight:bold"> @String.Format(System.Globalization.CultureInfo.GetCultureInfo("vi-VN"), "{0:c}", totalSoLuongXuat).Replace("₫", "")</td>
                                <td style="text-align:right;font-weight:bold"> @String.Format(System.Globalization.CultureInfo.GetCultureInfo("vi-VN"), "{0:c}", totalSoLuongCK).Replace("₫", "")</td>
                            </tr>
 }
                                    // Reset tổng và cập nhật Ma_Vt mới
                                    totalSoLuongDK = 0;
                                    totalSoLuongNhap = 0;
                                    totalSoLuongXuat = 0;
                                    totalSoLuongCK = 0;
                                    currentMa_Vt = row["Ma_Vt"].ToString();
                                }

                                // Cộng dồn vào tổng của nhóm Ma_Vt hiện tại
                                totalSoLuongDK += Convert.ToDecimal(row["So_Luong_DK_FM"]);
                                totalSoLuongNhap += Convert.ToDecimal(row["So_Luong_Nhap_FM"]);
                                totalSoLuongXuat += Convert.ToDecimal(row["So_Luong_Xuat_FM"]);
                                totalSoLuongCK += Convert.ToDecimal(row["So_Luong_CK_FM"]);
                                if (Convert.ToDecimal(row["So_Luong_CK_FM"]) > 0 || Convert.ToDecimal(row["So_Luong_DK_FM"]) > 0 || Convert.ToDecimal(row["So_Luong_Xuat_FM"]) > 0 || Convert.ToDecimal(row["So_Luong_Nhap_FM"]) > 0)
                                {
                                    <tr>
                                        <td>@row["Ma_Kho"]</td>
                                        <td>@row["Ma_Vt"]</td>
                                        <td style="text-align:left">@row["Ten_Vt"]</td>
                                        @{
                                            string soLo = row["So_Lo"].ToString();
                                            string[] parts = soLo.Split('/');
                                            string soLoAfterSlash = parts.Length > 1 ? parts[1] : "";
                                        }
                                        <td style="text-align:center">@soLoAfterSlash</td>


                                        <td>@row["Han_Dung"]</td>
                                        <td style="text-align:right"> @row["So_Luong_DK"]</td>
                                        <td style="text-align:right"> @row["So_Luong_Nhap"]</td>
                                        <td style="text-align:right"> @row["So_Luong_Xuat"]</td>
                                        <td style="text-align:right">@row["So_Luong_Ck"]</td>
                                    </tr>
}
                            }


                            @if (!string.IsNullOrEmpty(currentMa_Vt))
                            {
                        <tr style="background-color:lightgray">
                            <td></td>
                            <td style="font-weight:bold">@currentMa_Vt</td>
                            <td>
                            </td>
                            <td></td>
                            <td style="font-weight:bold">Tổng:</td>
                            <td style="text-align:right;font-weight:bold"> @String.Format(System.Globalization.CultureInfo.GetCultureInfo("vi-VN"), "{0:c}", totalSoLuongDK).Replace("₫", "")</td>
                            <td style="text-align:right;font-weight:bold"> @String.Format(System.Globalization.CultureInfo.GetCultureInfo("vi-VN"), "{0:c}", totalSoLuongNhap).Replace("₫", "") </td>
                            <td style="text-align:right;font-weight:bold"> @String.Format(System.Globalization.CultureInfo.GetCultureInfo("vi-VN"), "{0:c}", totalSoLuongXuat).Replace("₫", "")</td>
                            <td style="text-align:right;font-weight:bold"> @String.Format(System.Globalization.CultureInfo.GetCultureInfo("vi-VN"), "{0:c}", totalSoLuongCK).Replace("₫", "")</td>
                        </tr>
}
                        </tbody>



                        <tfoot>
                            @foreach (DataRow row in Model.Tables[1].Rows)
                            {
                                <tr style="background-color:burlywood">
                                    <td colspan="5" style="text-align:center;font-weight:bold">TỔNG CỘNG(TOTAL):</td>
                                    <td style="text-align:right;font-weight:bold"> @row["So_Luong_DK"]</td>
                                    <td style="text-align: right; font-weight: bold"> @row["So_Luong_Nhap"]</td>
                                    <td style="text-align: right; font-weight: bold"> @row["So_Luong_Xuat"]</td>
                                    <td style="text-align: right; font-weight: bold"> @row["So_Luong_CK"]</td>
                                </tr>
                            }
                        </tfoot>







                    </table>
                </div>
            </div>
        </div>
    </div>
    <!-- =======  Data-Table  = End  ===================== -->
    <!-- ============ Java Script Files  ================== -->
    <script src="~/assets/js/bootstrap.bundle.min.js"></script>
    <script src="~/assets/js/jquery-3.6.0.min.js"></script>
    <script src="~/assets/js/datatables.min.js"></script>
    <script src="//ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js"></script>
    <script src="//cdn.rawgit.com/rainabba/jquery-table2excel/1.1.0/dist/jquery.table2excel.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.rawgit.com/rainabba/jquery-table2excel/1.1.0/dist/jquery.table2excel.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.3/xlsx.full.min.js"></script>
    <script src="~/assets/js/pdfmake.min.js"></script>
    <script src="~/assets/js/vfs_fonts.js"></script>
    <script src="~/assets/js/custom.js"></script>
    <script src="https://cdn.canvasjs.com/canvasjs.min.js"></script> @*<script src="https://code.jquery.com/jquery-3.6.0.min.js"
        integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4="
        crossorigin="anonymous"></script>*@
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>
    <script>
        // Xử lý sự kiện click cho biểu tượng toggleIcon
        $(".toggleIcon").click(function () {
            $(this).toggleClass("expanded"); // Chuyển đổi giữa biểu tượng mở rộng và thu gọn
            $(this).closest(".maKhoGroup").nextUntil(".maKhoGroup").toggle(); // Ẩn/hiện các hàng chi tiết
        });
    </script>
    <script>
        function exportToExcel() {
            // Lấy danh sách cột cần xuất từ bảng gốc
            /*   var columnsToExport = ['Mã Đối Tượng', 'Tên Đối Tượng', 'ĐVT', 'Số Lượng', 'Kênh BH', 'Mã TDV', 'Tên TDV', 'Tổng tiền'];*/

            // Tạo bảng tạm thời chỉ chứa cột cần xuất
            var temporaryTable = $('#example').clone();

            //// Lặp qua các cột không nằm trong danh sách cần xuất và ẩn chúng
            //temporaryTable.find('thead th, tbody td').each(function () {
            //    var columnHeader = $(this).text();
            //    if (!columnsToExport.includes(columnHeader)) {
            //        $(this).hide();
            //    }
            //});

            // Format cells with numeric data (assuming 'Tổng tiền' is a numeric column)
            temporaryTable.find('tbody td:contains("₫")').attr('data-type', 'number');

            // Xuất Excel từ bảng tạm thời
            temporaryTable.table2excel({
                exclude: ".hidden",
                name: "Sheet 1",
                filename: "TongHopNhapXuatTonTheoKho"
            });
        }

    </script>

    <script>
        function toggleRows1551(cell) {
            var rowIndex = cell.parentElement.parentElement.rowIndex; // Adjusted to get the index of the parent row
            var table = document.getElementById('example');
            var rows = table.rows;

            for (var i = rowIndex + 1; i < rows.length; i++) {
                var row = rows[i];
                if (row.classList.contains('expandable-content_detail')) {
                    row.style.display = (row.style.display === 'none' || row.style.display === '') ? 'table-row' : 'none';
                } else if (row.classList.contains('table-dark')) {
                    break;
                }
            }
        }

        function toggleRows1563(cell) {
            var rowIndex = cell.parentElement.parentElement.rowIndex; // Adjusted to get the index of the parent row
            var table = document.getElementById('example');
            var rows = table.rows;

            for (var i = rowIndex + 1; i < rows.length; i++) {
                var row = rows[i];
                if (row.classList.contains('expandable-content_detail1563')) {
                    row.style.display = (row.style.display === 'none' || row.style.display === '') ? 'table-row' : 'none';
                } else if (row.classList.contains('table-dark')) {
                    break;
                }
            }
        }

        function toggleRows1561(cell) {
            var rowIndex = cell.parentElement.parentElement.rowIndex; // Adjusted to get the index of the parent row
            var table = document.getElementById('example');
            var rows = table.rows;

            for (var i = rowIndex + 1; i < rows.length; i++) {
                var row = rows[i];
                if (row.classList.contains('expandable-content_detail1561')) {
                    row.style.display = (row.style.display === 'none' || row.style.display === '') ? 'table-row' : 'none';
                } else if (row.classList.contains('table-dark')) {
                    break;
                }
            }
        }

        function toggleRows1571(cell) {
            var rowIndex = cell.parentElement.parentElement.rowIndex; // Adjusted to get the index of the parent row
            var table = document.getElementById('example');
            var rows = table.rows;

            for (var i = rowIndex + 1; i < rows.length; i++) {
                var row = rows[i];
                if (row.classList.contains('expandable-content_detail1571')) {
                    row.style.display = (row.style.display === 'none' || row.style.display === '') ? 'table-row' : 'none';
                } else if (row.classList.contains('table-dark')) {
                    break;
                }
            }
        }

        function toggleRows1572(cell) {
            var rowIndex = cell.parentElement.parentElement.rowIndex; // Adjusted to get the index of the parent row
            var table = document.getElementById('example');
            var rows = table.rows;

            for (var i = rowIndex + 1; i < rows.length; i++) {
                var row = rows[i];
                if (row.classList.contains('expandable-content_detail1572')) {
                    row.style.display = (row.style.display === 'none' || row.style.display === '') ? 'table-row' : 'none';
                } else if (row.classList.contains('table-dark')) {
                    break;
                }
            }
        }
    </script>
    <script>
        // Lấy các phần tử cần sử dụng
        var input = document.getElementById("searchInput");
        var select = document.getElementById("nhomtheoselect2");

        // Thêm event listener cho sự kiện click trên toàn bộ trang
        document.addEventListener("click", function (event) {
            // Kiểm tra nếu sự kiện click không phải từ ô input hoặc dropdown
            if (event.target !== input && event.target !== select) {
                // Ẩn dropdown
                select.style.display = "none";
            }
        });
        function filterDropdown() {
            var filter = input.value.toUpperCase();
            var option = select.getElementsByTagName("option");

            for (var i = 0; i < option.length; i++) {
                var txtValue = option[i].textContent || option[i].innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    option[i].style.display = "";
                } else {
                    option[i].style.display = "none";
                }
            }

            // Tự động mở rộng dropdown
            select.size = Math.min(5, select.options.length);

            // Hiển thị dropdown khi ô input được click
            select.style.display = "block";
        }
        function saveSelectedValueToCookie2() {
            var select = document.getElementById("nhomtheoselect2");
            var input = document.getElementById("searchInput");

            // Lấy giá trị đã chọn từ select
            var selectedValue = select.value;

            // Cập nhật giá trị của ô input
            input.value = selectedValue;

            // Đặt giá trị vào cookie, bao gồm trường hợp selectedValue là null hoặc undefined
            document.cookie = 'Ma_Dv=' + (selectedValue != null ? selectedValue : '');

            // Ẩn dropdown select
            select.style.display = "none";

            // Thực hiện các bước khác theo yêu cầu của bạn.
            console.log("Đã chọn giá trị: " + selectedValue);

            // Gọi hàm để nhóm dữ liệu dựa trên giá trị đã chọn
        }

    </script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Kiểm tra xem cookie "Ma_NH" có tồn tại không
            var maNHValue = getCookie("Ma_Dv");

            // Nếu có giá trị, thiết lập giá trị cho ô input
            if (maNHValue) {
                document.getElementById("searchInput").value = maNHValue;
            }
        });

        // Hàm lấy giá trị của một cookie
        function getCookie(cookieName) {
            var name = cookieName + "=";
            var decodedCookie = decodeURIComponent(document.cookie);
            var cookieArray = decodedCookie.split(';');

            for (var i = 0; i < cookieArray.length; i++) {
                var cookie = cookieArray[i];
                while (cookie.charAt(0) == ' ') {
                    cookie = cookie.substring(1);
                }
                if (cookie.indexOf(name) == 0) {
                    return cookie.substring(name.length, cookie.length);
                }
            }
            return null;
        }
    </script>





    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var runReportButton = document.getElementById("runReportButton");

            if (runReportButton) {
                runReportButton.addEventListener("click", function () {
                    var dropdownInput = document.getElementById("dropdownInputVT");
                    var selectedOption = document.querySelector("#dropdownListVT option[value='" + dropdownInput.value + "']");

                    if (selectedOption) {
                        var tenDt = selectedOption.getAttribute('data-maVT');
                        document.cookie = 'Ma_Vt=' + tenDt;
                    } else {
                        var selected = "";
                        document.cookie = 'Ma_Vt=' + selected;
                    }
                });
            }
        });
        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
        }
        function saveSelectedValueToCookie4() {
            var selectedValue = $("#nhomtheoselect4").val();

            // Tạo một đối tượng Date để thiết lập thời gian hết hạn của cookie
            var expirationDate = new Date();
            expirationDate.setTime(expirationDate.getTime() + (1 * 60 * 1000)); // 1 phút

            document.cookie = 'Ma_Dv=' + selectedValue;

            // Gọi hàm để nhóm dữ liệu dựa trên giá trị đã chọn
        }
        function saveSelectedValueToCookie3() {
            var selectedValue = $("#chitietselect").val();

            // Lấy giá trị của cookie hiện tại
            var existingCookieValue = getCookie('Ma_Dvcs_2');

            // Thời gian sống của cookie (đơn vị là giây, 30 ngày trong ví dụ này)
            var expirationTime = 30 * 24 * 60 * 60;

            // Tạo một object Date để thiết lập thời gian hết hạn của cookie
            var expirationDate = new Date();
            expirationDate.setTime(expirationDate.getTime() + (expirationTime * 1000));

            if (existingCookieValue) {
                // Nếu cookie đã tồn tại, cập nhật giá trị của nó và thiết lập thời gian hết hạn
                document.cookie = 'Ma_Dvcs_2=' + selectedValue;
            } else {
                // Nếu cookie chưa tồn tại, tạo một cookie mới với thời gian hết hạn
                document.cookie = 'Ma_Dvcs_2=' + selectedValue;
            }
        }
    </script>



    <script>
        function runReport() {
            var fromDate = document.getElementById("tu_ngay").value;
            var toDate = document.getElementById("den_ngay").value;
            document.cookie = "From_date=" + fromDate + "; path=/";
            document.cookie = "To_date=" + toDate + "; path=/";
            const uncheckedCheckboxIndexes = [];
            const checkboxes = document.querySelectorAll('input[name="myCheckbox"]');

            checkboxes.forEach((checkbox, index) => {
                if (!checkbox.checked) {
                    uncheckedCheckboxIndexes.push(index);
                }
            });

            // Lưu trạng thái vào Local Storage
            localStorage.setItem('uncheckedCheckboxIndexes', JSON.stringify(uncheckedCheckboxIndexes));
            // Hiển thị thẻ span có id là "spanText"
            const spanElement = document.getElementById("spanText");
            spanElement.style.display = "block";
            const hiddenElement = document.getElementById("head");
            hiddenElement.style.visibility = "hidden";

        }
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const checkboxes = document.querySelectorAll('input[name="myCheckbox"]');
            const table = document.getElementById('example');

            checkboxes.forEach((checkbox, index) => {
                checkbox.addEventListener('change', function () {
                    const columnIndex = index;
                    const rows = table.querySelectorAll('tr');

                    rows.forEach(row => {
                        const cells = row.querySelectorAll('td, th');
                        cells[columnIndex].style.display = this.checked ? '' : 'none';
                    });
                });
            });
        });
    </script>
    <script>

        function saveNgay() {
            var from_date = document.getElementById("tu_ngay").value;
            var to_date = document.getElementById("den_ngay").value;
            var inputValue = document.getElementById("searchInput").value;
            if (!inputValue.trim()) {
                // Nếu ô input rỗng, đặt giá trị cookie thành khoảng trắng
                document.cookie = 'Ma_Dv= ';
            } else {
                // Nếu ô input có giá trị, đặt giá trị cookie theo giá trị của ô input
                document.cookie = 'Ma_Dv=' + inputValue;
            }
            var select = document.getElementById("nhomtheoselect");
            var selectedValue = select.value;

            // Kiểm tra nếu không có lựa chọn nào được chọn thì đặt giá trị mặc định là "Tất Cả"
            var cookieValue = selectedValue != null ? selectedValue : '';



            document.cookie = "From_date=" + from_date;
            document.cookie = "To_date=" + to_date;
            saveSelectedValueToCookie2();
            saveSelectedValueToCookie();
        }
        function handleFormSubmit(event) {
            event.preventDefault();
            showLoader();
            // Show the loader when the form is submitted


            // Lấy các giá trị ngày đã chọn từ trường nhập liệu
            const fromDate = document.getElementById('tu_ngay').value;
            const toDate = document.getElementById('den_ngay').value;

            // Tạo URL mới với các tham số truy vấn
            const form = event.target;
            const actionUrl = `${form.action}?From_date=${fromDate}&To_date=${toDate}`;

            // Chuyển hướng tới URL mới với các giá trị ngày đã chọn làm các tham số truy vấn
            window.location.href = actionUrl;
        }
        function displaySelectedDate() {
            // Lấy các giá trị ngày đã chọn từ trường nhập liệu
            const fromDate = document.getElementById('tu_ngay').value;
            const toDate = document.getElementById('den_ngay').value;

            // Hiển thị các giá trị ngày đã chọn lên thẻ h5
            const selectedDateDisplay = document.getElementById('selectedDateDisplay');
            selectedDateDisplay.innerText = `Từ ngày: ${fromDate} - Đến ngày: ${toDate}`;
            window.location.href = selectedDateDisplay;
        }

        // Function to show the loader
        function showLoader() {
            const loader = document.querySelector(".loader");
            loader.classList.remove("loader-hidden");
        }

        // Function to hide the loader
        function hideLoader() {
            const loader = document.querySelector(".loader");
            loader.classList.add("loader-hidden");
        }

        /*  Add an event listener to the form submission*/
        document.getElementById("dateForm").addEventListener("submit", (event) => {
            event.preventDefault();
            displaySelectedDate();
            // Show the loader when the form is submitted
            showLoader();

            // Lấy các giá trị ngày đã chọn từ trường nhập liệu
            const fromDate = document.getElementById('tu_ngay').value;
            const toDate = document.getElementById('den_ngay').value;

            // Tạo URL mới với các tham số truy vấn
            const form = event.target;
            const actionUrl = `${form.action}?From_date=${fromDate}&To_date=${toDate}`;

            // Chuyển hướng tới URL mới với các giá trị ngày đã chọn làm các tham số truy vấn
            window.location.href = actionUrl;
        });

        // Add event listener for window load event
        window.addEventListener("load", () => {
            // Hide the loader after the page is loaded
            hideLoader();
            const fromDate = urlParams.get('From_date');
            const toDate = urlParams.get('To_date');
            if (fromDate && toDate) {
                displaySelectedDate();
            }
        });
    </script>


    <script>
        function getCookie(name) {
            var match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));
            if (match) return match[2];
        }

        // Hàm để đặt giá trị mặc định cho dropdown
        function setDefaultDropdownValue() {


            var maNHValue = getCookie('Ma_Dv');
            // Nếu cookie tồn tại và giá trị là một trong các giá trị của dropdown
            if (maTKValue && document.getElementById('nhomtheoselect').querySelector('option[value="' + maTKValue + '"]')) {
                // Đặt giá trị mặc định cho dropdown
                document.getElementById('nhomtheoselect').value = maTKValue;
            }
            if (maNHValue) {
                document.getElementById('searchInput').value = maNHValue;
            }
        }

        // Gọi hàm setDefaultDropdownValue khi trang được tải
        window.onload = function () {
            setDefaultDropdownValue();
        };
    </script>
    <script>
        function printPage() {
            // Mở cửa sổ in mới
            var printWindow = window.open('', '_blank');
            printWindow.location.href = "/TheKho/TongNhapXuatTonTheoLo_In";



        }
    </script>

    <script>


        document.addEventListener('DOMContentLoaded', function () {
            var dropdownInput = document.getElementById('dropdownInputVT');
            var selectedOption = document.getElementById('selectedOption');

            // Lấy giá trị từ cookie
            var mavtFromCookie = getCookie('Ma_Vt');

            // Đặt giá trị cho trường input và hidden input
            if (mavtFromCookie) {
                dropdownInput.value = mavtFromCookie;
                selectedOption.value = mavtFromCookie;
            }
        });
        // Hàm lấy giá trị từ cookie
        function getCookie(cookieName) {
            var name = cookieName + "=";
            var decodedCookie = decodeURIComponent(document.cookie);
            var cookieArray = decodedCookie.split(';');

            for (var i = 0; i < cookieArray.length; i++) {
                var cookie = cookieArray[i];
                while (cookie.charAt(0) == ' ') {
                    cookie = cookie.substring(1);
                }
                if (cookie.indexOf(name) == 0) {
                    return cookie.substring(name.length, cookie.length);
                }
            }
            return null;
        }
    </script>
    <script>
        window.onload = function () {
            // Trích xuất giá trị từ cookie
            function getCookieValue(cookieName) {
                const name = cookieName + "=";
                const decodedCookie = decodeURIComponent(document.cookie);
                const cookieArray = decodedCookie.split(";");
                for (let i = 0; i < cookieArray.length; i++) {
                    let cookie = cookieArray[i];
                    while (cookie.charAt(0) === " ") {
                        cookie = cookie.substring(1);
                    }
                    if (cookie.indexOf(name) === 0) {
                        return cookie.substring(name.length, cookie.length);
                    }
                }
                return "";
            }

            // Lấy giá trị từ cookie "Dvcs3"
            const dvcs3Value = getCookieValue("Ma_Dvcs_2");

            // Tìm phần tử select
            const selectElement = document.getElementById("chitietselect");

            // Thiết lập giá trị cho select nếu có giá trị từ cookie
            if (dvcs3Value !== "" ) {
                selectElement.value = dvcs3Value;
            }


              var maDvCsSelect = document.getElementById("maDvCsSelect");
    var maDvcsCookieValue = "@Request.Cookies["Ma_Dvcs_2"].Value"; // Thay thế bằng cách lấy giá trị từ Razor (ASP.NET)

            if (maDvcsCookieValue === "OPC_VT" || maDvcsCookieValue === "OPC_CT" || maDvcsCookieValue === "OPC_TP" || maDvcsCookieValue === "OPC_TG" || maDvcsCookieValue === "OPC_MD" || maDvcsCookieValue === "OPC_NT" || maDvcsCookieValue === "OPC_DN" || maDvcsCookieValue === "OPC_NA" || maDvcsCookieValue === "OPC_HN" || maDvcsCookieValue === "OPC_B1") {
        // Nếu MA_DVCS là rỗng, bạn có thể ẩn dropdown
        maDvCsSelect.style.display = "none";
    } else {
        // Nếu MA_DVCS không rỗng, bạn có thể hiển thị dropdown và chọn giá trị tương ứng
        maDvCsSelect.style.display = "block";
      /*  maDvCsSelect.value = maDvcsCookieValue;*/
            }


        };


    </script>

</body>

</html>