
@{ ViewBag.Title = "Bao Cao Doanh Thu CN";
    Layout = null;
    var fromDate = Request.QueryString["From_date"];
    var toDate = Request.QueryString["To_date"];
    var fromDateValue = DateTime.ParseExact(fromDate, "yyyy-MM-dd", CultureInfo.InvariantCulture);
    var toDateValue = DateTime.ParseExact(toDate, "yyyy-MM-dd", CultureInfo.InvariantCulture);

    var formattedFromDate = fromDateValue.ToString("dd/MM/yyyy");
    var formattedToDate = toDateValue.ToString("dd/MM/yyyy");
}
@using System.Data;
@using System.Globalization;
<!DOCTYPE html>
<html lang="en">

<head>
    <style>
        a {
            text-decoration: none;
        }

        .container table {
            justify-content: center;
            align-items: center;
            height: 50vh;
            zoom: 90%;
            text-align: center;
        }

        .container canvas {
            width: 100%;
            height: 100%;
            justify-content: center;
            align-items: center;
            height: min-content;
            zoom: normal;
        }

        h3 {
            text-align: center;
            color: blue;
        }

        table, td, th {
            border: 1px solid black;
            align-items: center;
            margin-left: auto;
            margin-right: auto;
            height: 50px;
        }

        table {
            border-collapse: collapse;
        }

        .num {
            text-align: center;
            width: 100px;
        }

        .ten {
            text-align: left;
        }

        button {
            background-color: #2297f6;
            border: none;
            outline: none;
            padding: 5px;
            font-size: 30px;
            color: #ffffff;
            cursor: pointer;
            margin-top: 20px;
            text-align: center;
        }

        p {
            color: #ffffff;
        }



        canvas {
            width: 75%;
            height: 25vh;
            text-align: center;
        }

            canvas#barchart {
                width: 50%;
                height: 25%;
            }

        .tu_ngay {
            height: 35px;
            border-radius: 5px;
            border: 1px solid #dcdcdc;
            padding: 0px 10px;
            outline: none;
            Format: 'd-m-y';
        }

        .den_ngay {
            height: 35px;
            border-radius: 5px;
            border: 1px solid #dcdcdc;
            padding: 0px 10px;
            outline: none;
            Format: 'd-m-y';
        }



        div#chart {
            text-align: center;
            display: flex;
            /* justify-content:;*/
            width: 50%;
            height: 300px;
        }

        .submit {
            /*height: 50px;
        width: 100px;*/
            background-color: silver;
            border: none;
            color: cadetblue;
            border-radius: 7px;
            font-size: 18px;
            font-weight: 600;
            margin-top: 20px;
            justify-content: center;
            align-items: center;
            transition: all 1s ease-in-out;
        }

            .submit:hover {
                background-color: darkcyan;
                color: #ffffff;
                transition: cubic-bezier(0.075, 0.82, 0.165, 1);
            }

        .form .locBC {
            display: flex;
            flex-direction: column;
            padding: 20px;
            width: 500px;
            height: 400px;
            float: left;
        }

        .form table {
            justify-content: center;
            align-items: center;
            height: 50vh;
            zoom: 90%;
            text-align: center;
        }

        .expandable {
            cursor: pointer;
        }

        .percent {
            width: 20%;
            text-align: right;
            text-align: center;
            background-color: #eee;
            background: linear-gradient(to right, #3399dd, #3399dd);
            background-size: 1% 100%;
            background-repeat: no-repeat;
        }



        #data {
            width: 100%;
            height: 150px;
            background: white;
            float: inline-start;
        }

        .dropdown-check-list {
            display: inline-block;
        }

            .dropdown-check-list .anchor {
                position: relative;
                cursor: pointer;
                display: inline-block;
                padding: 5px 50px 5px 10px;
                border: 1px solid #ccc;
            }

                .dropdown-check-list .anchor:after {
                    position: absolute;
                    content: "";
                    border-left: 2px solid black;
                    border-top: 2px solid black;
                    padding: 5px;
                    right: 10px;
                    top: 20%;
                    -moz-transform: rotate(-135deg);
                    -ms-transform: rotate(-135deg);
                    -o-transform: rotate(-135deg);
                    -webkit-transform: rotate(-135deg);
                    transform: rotate(-135deg);
                }

                .dropdown-check-list .anchor:active:after {
                    right: 8px;
                    top: 21%;
                }

            .dropdown-check-list ul.items {
                padding: 2px;
                display: none;
                margin: 0;
                border: 1px solid #ccc;
                border-top: none;
            }

                .dropdown-check-list ul.items li {
                    list-style: none;
                }

            .dropdown-check-list.visible .anchor {
                color: #0094ff;
            }

            .dropdown-check-list.visible .items {
                display: block;
            }

        .custom-combobox-container {
            position: relative;
            width: 100%;
            outline: none;
            border: none;
        }

        .custom-combobox {
            width: 100%;
            display: flex;
            align-items: center;
            border: 1px solid rgb(199, 199, 199);
            padding: 10px;
        }

            .custom-combobox input[type="text"] {
                width: 95%;
                border: none;
                outline: none;
                background: none;
            }

        .options-container {
            position: absolute;
            width: 100%;
            z-index: 100;
            border: 1px solid rgb(204, 204, 204);
            border-top: none;
            display: none;
            height: 150px;
            overflow-y: scroll;
        }

            .options-container label {
                display: block;
                cursor: pointer;
                padding: 5px;
                margin-top: 5px;
                user-select: none;
            }

                .options-container label:hover {
                    background: rgb(255, 255, 255);
                }

            .options-container::-webkit-scrollbar {
                width: 8px;
            }

            .options-container::-webkit-scrollbar-thumb {
                background-color: white;
            }

        .sidebar {
            position: relative;
            top: 0;
            left: 0;
            height: 50px;
            width: 200px;
            transition: all 0.5s ease;
        }

        h5 {
            text-align: center;
            font-size: 15px;
            color: aliceblue;
        }

        .myInput {
            text-align: center;
            height: auto;
            width: 1000px;
            padding: 10px;
        }

        .container {
            text-align: center;
        }

        .data_table {
            width: max-content;
        }

        .bieu_do {
            padding: 10px;
            /*    margin: 10%;*/
            text-align: center;
            width: 200px;
            font-size: 16px;
            font-weight: 600;
            color: #fff;
            cursor: pointer;
            /*      margin: 20px;*/
            height: 55px;
            text-align: center;
            border: none;
            background-size: 300% 100%;
            border-radius: 10px;
            moz-transition: all .4s ease-in-out;
            -o-transition: all .4s ease-in-out;
            -webkit-transition: all .4s ease-in-out;
            transition: all .4s ease-in-out;
        }

            .bieu_do:hover {
                background-position: 100% 0;
                moz-transition: all .4s ease-in-out;
                -o-transition: all .4s ease-in-out;
                -webkit-transition: all .4s ease-in-out;
                transition: all .4s ease-in-out;
            }

            .bieu_do:focus {
                outline: none;
            }

        .bieu_do {
            background-image: linear-gradient(to right, #f5ce62, #e43603, #fa7199, #e85a19);
            box-shadow: 0 4px 15px 0 rgba(229, 66, 10, 0.75);
        }

        .chart {
            margin: 40px 0px 0px 0px;
        }

        .box-chart {
            flex: 1; /* Chia chiều rộng ngang đều nhau */
            margin-right: 10px;
            /*  width: 100px;*/
            /*height: 25vh;*/
        }

        .full-row {
            margin-left: 250px;
            width: 100%;
        }



        .text-loading {
            position: fixed;
            top: 60%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 13px;
            color: black;
            z-index: 2;
            background-color: rgba(255, 255, 255, 0.9);
            padding: 5px 10px;
            display: none;
        }

        .custom-checkbox {
            margin-top: 10px;
            display: inline-block;
            position: relative;
            padding-left: 30px;
            margin-right: 15px;
            cursor: pointer;
        }

            .custom-checkbox input {
                position: absolute;
                opacity: 0;
                cursor: pointer;
            }

        .checkmark {
            position: absolute;
            top: 0;
            left: 0;
            height: 25px;
            width: 25px;
            border: 2px solid black;
            background-color: #ffffff;
        }

        .custom-checkbox:hover input ~ .checkmark {
            background-color: #ccc;
        }

        .custom-checkbox input:checked ~ .checkmark {
            background-color: #2196F3;
        }

        .checkmark:after {
            content: "";
            position: absolute;
            display: none;
        }

        .custom-checkbox input:checked ~ .checkmark:after {
            display: block;
        }

        .custom-checkbox .checkmark:after {
            left: 9px;
            top: 5px;
            width: 5px;
            height: 10px;
            border: solid white;
            border-width: 0 3px 3px 0;
            transform: rotate(45deg);
        }

        .checkContainer {
            height: 300px;
            overflow: auto;
        }

            .checkContainer::-webkit-scrollbar {
                width: 0.2em;
                background-color: transparent;
            }

        .tabs {
            display: inline-block;
            /* bottom: 0;
            left: 0;
            right: 0;*/
            width: 300vh;
            height: 50px;
            /* margin: 15px auto;*/
            border-bottom: 1px solid #DAE0E7;
            background: #F9F9F9;
            list-style-type: none;
            padding: 0px 12px 0;
        }

        a {
            text-decoration: none;
            color: #333;
        }

        .tab {
            float: left;
            height: 44px;
            margin: 0 8px -1px 0;
            border: 1px solid #DAE0E7;
            background: #F9F9F9;
            border-radius: 0px 0px 0 0;
            overflow: hidden;
        }

            .tab, .tab a {
                transition: all .25s;
            }

                .tab a {
                    display: inline-block;
                }

                    .tab a:first-child {
                        padding: 12px 2px 12px 16px;
                        white-space: nowrap;
                    }

                .tab.tabClosed, .tab.tabClosed a:first-child {
                    margin-right: 0;
                    border-width: 0;
                }

                .tab.tabClosed {
                    width: 0 !important; /* use important because we need to set the width of tabs in javascript in order to be able to animate them to 0 */
                }

                    .tab.tabClosed a {
                        opacity: 0;
                    }

        .closeTab:hover {
            background: #DAE0E7;
        }

        .tab-control {
            z-index: 90000;
            position: fixed;
        }

            .tab-control ul {
                position: absolute;
                /* left:300px;*/
            }

                .tab-control ul li {
                    text-align: center;
                }

        .tab.selected-tab {
            pointer-events: none;
            background-color: #3763a3; /* Màu nền của tab */
        }

            .tab.selected-tab a {
                pointer-events: none;
                color: white /* Màu nền của tab */
            }

            .tab.selected-tab .closeTab {
                pointer-events: auto;
            }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.14.0/js/bootstrap-select.min.js"></script>
    <script type="text/javascript" src="Scripts/table2excel.js"></script>
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>Báo Cáo Doanh Thu Chi Nhánh </title>
    <meta content="" name="description">
    <meta content="Author" name="MJ Maraz">
    <link href="~/assets/images/Logo.png" rel="icon">
    <link href="~/assets/images/Logo.png" rel="apple-touch-icon">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap" rel="stylesheet">
    <!-- ========================================================= -->


    <link rel="stylesheet" href="~/assets/css/bootstrap.min.css">
    <link rel="stylesheet" href="~/assets/css/datatables.min.css">
    <link rel="stylesheet" href="~/assets/css/style.css">
    <link rel="stylesheet" href="~/Styles/loader.css">






</head>
<!-- =============== Design & Develop By = MJ MARAZ   ====================== -->

<body style="background-color: #e0e8ee ">
    @*<div class="tab-control" style="position:fixed;bottom:50px">
            <ul class="tabs" style="background-color: #1d1b31">
                <li class="tab selected"><a href="/Home/About" style="padding-right:5px">Home</a></li>

            </ul>
        </div>*@
    <div class="loader" style="z-index:1"></div>

    <div class="sidebar" style="margin-left:10px">
        <div class="logo-details">

        </div>
        <ul class="nav-links" style="justify-content: center;display:flex">
            <li>
                <form id="dateForm" action="DoanhThuChiNhanhKGam" method="post" onsubmit="handleFormSubmit(event)">
                    <div id="locBC">
                        <span id="spanText" class="text-loading">[usp_KetQuaKinhDoanhCN_SAP]</span>
                        <a>Từ Ngày</a><br /><br />
                        <input class="tu_ngay" placeholder="Từ Ngày" id="tu_ngay" name="From_date" type="date" format="YYYY-MM-DD" value="@Request.QueryString["From_date"]" />
                        <script>$("#tu_ngay").datetimepicker({ timepicker: false, format: 'Y-m-d' });</script><br /><br />
                        <a>Đến Ngày</a><br /><br />
                        <input class="den_ngay" id="den_ngay" placeholder=" Đến Ngày" name="To_date" type="DATE" format="YYYY-MM-DD" value="@Request.QueryString["To_date"]" /><br /><br />
                        <script>$("#den_ngay").datetimepicker({ timepicker: false, format: 'Y-m-d' });</script>
                    </div>
                    <div class="checkContainer">
                        <label class="custom-checkbox">
                            <input type="checkbox" name="myCheckbox" value="option1" checked>
                            <span class="checkmark"></span>
                            Tên Đơn Vị
                        </label>
                        <label class="custom-checkbox">
                            <input type="checkbox" name="myCheckbox" value="option1" checked>
                            <span class="checkmark"></span>
                            Doanh Thu
                        </label>
                        <label class="custom-checkbox">
                            <input type="checkbox" name="myCheckbox" value="option1" checked>
                            <span class="checkmark"></span>
                            Khoán
                        </label>
                        <br />
                        <label class="custom-checkbox">
                            <input type="checkbox" name="myCheckbox" value="option1" checked>
                            <span class="checkmark"></span>
                            Tỷ lệ
                        </label>
                        <br />
                        <label class="custom-checkbox">
                            <input type="checkbox" name="myCheckbox" value="option1" checked>
                            <span class="checkmark"></span>
                            Lũy Kế
                        </label>
                    </div>
                    <div>
                        <button class="submit" type="submit" onclick="runReport()"> Chạy Báo Cáo </button>
                    </div>
                </form>
            </li>
        </ul>
    </div>

    <header class="header_part" style="background-color: #aec9e0; color: #3483bd ">
        @if (Request.Cookies["UserName"].Value == "admin-cnct" || Request.Cookies["UserName"].Value == "admin-cntg" || Request.Cookies["UserName"].Value == "admin-cnmd" || Request.Cookies["UserName"].Value == "admin-cnh1" || Request.Cookies["UserName"].Value == "admin-cnvt"
                       || Request.Cookies["UserName"].Value == "admin-cnnt" || Request.Cookies["UserName"].Value == "admin - cndn" || Request.Cookies["UserName"].Value == "admin - cnna" || Request.Cookies["UserName"].Value == "admin - cnhn")
        {



            <a href="/Home/About1" style="cursor:pointer">
                <img src="~/Images/opc.png" style="height:60px;width:60px;margin-left:10px">
            </a>
        }
        else
        {
            <a href="/Home/About" style="cursor:pointer">
                <img src="~/Images/opc.png" style="height:60px;width:60px;margin-left:10px">
            </a>
        }
        <h4 style="color:#3483bd;font-family:'Times New Roman'">Báo Cáo Doanh Thu Chi Nhánh</h4>
        <h5 style="color: #3483bd">Từ @formattedFromDate đến @formattedToDate</h5>
    </header>
    @*=======  Data-Table  = Start  ==========================*@

    @*<div class="full-row" style="display: flex; max-width: 100%; width: 100%;">
            <div class="row-container1" style="margin-left: 150px;">

                <div id="chartContainer" style="height: 100%; width: 80%; background-color: transparent;"></div>
            </div>
        </div>*@







    <div class="container">

        <div class="row">
            <div class="col-12">
                <div class="data_table" style="justify-content:center">
                    <table id="example" class="table table-striped table-bordered">
                        <thead class="table-dark">
                            <tr>
                                <th style="width:300px">Tên Đơn Vị</th>
                                <th style="width:120px">Doanh Thu</th>
                                <th style="width:120px">Khoán</th>
                                <th style="width:120px">Tỷ lệ</th>
                                <th style="width:120px">Lũy Kế</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (DataRow row2 in Model.Tables[0].Rows)
                            {
                                <tr>
                                    <td>@row2["Ten_DvCs"]</td>

                                    <td class="num" style="text-align:right">@String.Format("{0:n0}", Convert.ToDecimal(row2["Tong_Thuc_Hien"])).Replace(".", "")</td>
                                    <td class="num" style="text-align:right">@String.Format("{0:n0}", Convert.ToDecimal(row2["Tong_Khoan"])).Replace(".", "")</td>
                                    <td class="total-tyle" style="text-align:right">
                                        <script>
        var tyLeValue = parseFloat('@row2["Ty_Le"]');
        var formattedTyLe = formatPercentage(tyLeValue);
        document.write(formattedTyLe);

        function formatPercentage(value) {
            var roundedValue = (Math.round(value * 100) / 100).toFixed(2); // Làm tròn đến 2 chữ số thập phân
            var parts = roundedValue.toString().split('.'); // Tách phần nguyên và phần thập phân
            parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ","); // Thêm dấu phẩy ngăn cách
            return parts.join('.') + '%';
        }
                                        </script>
                                    </td>

                                    <td class="num" style="text-align:right">0</td>


                                </tr>
                            }


                        </tbody>
                        <tfoot>
                            <tr id="total-row" style="background-color: burlywood">
                                <td><strong>Tổng cộng</strong></td>
                                <td class="total-doanhthu-opc" style="text-align:right"></td>
                                <td class="total-khoan-opc" style="text-align:right"></td>
                                <td class="total-tyle-opc" style="text-align:right"></td>
                                <td class="total-luyke" style="text-align:right"></td>

                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>
    </div> <!-- =======  Data-Table  = End  ===================== --> <!-- ============ Java Script Files  ================== -->


    <script src="~/assets/js/bootstrap.bundle.min.js"></script>
    <script src="~/assets/js/jquery-3.6.0.min.js"></script>
    <script src="~/assets/js/datatables.min.js"></script>
    <script src="~/assets/js/pdfmake.min.js"></script>
    <script src="~/assets/js/vfs_fonts.js"></script>
    <script src="~/assets/js/custom.js"></script>
    <script src="https://cdn.canvasjs.com/canvasjs.min.js"></script> @*<script src="https://code.jquery.com/jquery-3.6.0.min.js"
        integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4="
        crossorigin="anonymous"></script>*@
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.bundle.min.js"></script>


    <script>
        function runReport() {
            const uncheckedCheckboxIndexes = [];
            const checkboxes = document.querySelectorAll('input[name="myCheckbox"]');

            checkboxes.forEach((checkbox, index) => {
                if (!checkbox.checked) {
                    uncheckedCheckboxIndexes.push(index);
                }
            });

            // Lưu trạng thái vào Local Storage
            localStorage.setItem('uncheckedCheckboxIndexes', JSON.stringify(uncheckedCheckboxIndexes));
            // Hiển thị thẻ span có id là "spanText"
            const spanElement = document.getElementById("spanText");
            spanElement.style.display = "block";
        }</script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const checkboxes = document.querySelectorAll('input[name="myCheckbox"]');
            const table = document.getElementById('example');

            checkboxes.forEach((checkbox, index) => {
                checkbox.addEventListener('change', function () {
                    const columnIndex = index;
                    const rows = table.querySelectorAll('tr');

                    rows.forEach(row => {
                        const cells = row.querySelectorAll('td, th');
                        cells[columnIndex].style.display = this.checked ? '' : 'none';
                    });
                });
            });
        });</script>
    <script>
        function applyCheckboxAndColumnState() {
            const checkboxes = document.querySelectorAll('input[name="myCheckbox"]');
            const table = document.getElementById('example');

            checkboxes.forEach((checkbox, index) => {
                const columnIndex = index;
                const rows = table.querySelectorAll('tr');

                if (!checkbox.checked) {
                    rows.forEach(row => {
                        const cells = row.querySelectorAll('td, th');
                        cells[columnIndex].style.display = 'none';
                    });
                } else {
                    rows.forEach(row => {
                        const cells = row.querySelectorAll('td, th');
                        cells[columnIndex].style.display = '';
                    });
                }
            });
        }
        // Hàm lấy trạng thái checkbox từ Local Storage và ẩn cột
        function applyUncheckedCheckboxState() {
            const uncheckedCheckboxIndexes = JSON.parse(localStorage.getItem('uncheckedCheckboxIndexes'));
            if (uncheckedCheckboxIndexes) {

                const checkboxes = document.querySelectorAll('input[name="myCheckbox"]');

                uncheckedCheckboxIndexes.forEach(index => {
                    checkboxes[index].checked = false;
                });
            }
        }

        // Áp dụng trạng thái checkbox đã bỏ chọn từ Local Storage khi trang được tải
        document.addEventListener('DOMContentLoaded', function () {
            // Áp dụng trạng thái của các checkbox đã bỏ chọn
            applyUncheckedCheckboxState();
        });</script>
    <script>
        function handleFormSubmit(event) {
            event.preventDefault();
            const fromDate = document.getElementById('tu_ngay').value;
            const toDate = document.getElementById('den_ngay').value;
            const form = event.target;
            const actionUrl = `${form.action}?From_date=${fromDate}&To_date=${toDate}`;
            window.location.href = actionUrl;
        }
        function showLoader() {
            const loader = document.querySelector(".loader");
            loader.classList.remove("loader-hidden");
        }
        function hideLoader() {
            const loader = document.querySelector(".loader");
            loader.classList.add("loader-hidden");
            applyCheckboxAndColumnState();
            createChart(chartData);
            createChart1(chartData1);
        }
        document.getElementById("dateForm").addEventListener("submit", (event) => {
            event.preventDefault();
            showLoader();
            const fromDate = document.getElementById('tu_ngay').value;
            const toDate = document.getElementById('den_ngay').value;
            const form = event.target;
            const actionUrl = `${form.action}?From_date=${fromDate}&To_date=${toDate}`;
            window.location.href = actionUrl;
        });

        window.addEventListener("load", () => {
            hideLoader();
            applyCheckboxAndColumnState();
        });</script>
    <script>

    var barCanvas = document.getElementById("barchart");

    var Con = [];//these are all javascript array variables
    var Tyle25 = [];
    var Phien = [];
        var OPC = [];
        var Sui = [];
    @foreach (DataRow row2 in Model.Tables[0].Rows)
{
  @: OPC.push({ y: @row2["Tyle_OPC"], indexLabel: "@row2["Tyle_OPC"]%" });
    @: Con.push({ y: @row2["Tyle_Con"], indexLabel: "@row2["Tyle_Con"]%" });
    @: Tyle25.push({ y: @row2["Tyle_25"], indexLabel: "@row2["Tyle_25"]%" });
    @: Phien.push({ y: @row2["Tyle_Phien"], indexLabel: "@row2["Tyle_Phien"]%" });
    @: Sui.push({ y: @row2["Tyle_Sui"], indexLabel: "@row2["Tyle_Sui"]%" });

}
    var Con = {
        label: 'Tỷ lệ Cồn',
        data: Con,
        backgroundColor: 'rgb(255, 99, 132)',
        borderWidth: 0,
    };

        var Tyle25 = {
            label: 'Tỷ lệ 25',
            data: Tyle25,
        backgroundColor: 'rgb(54, 162, 235)',
        borderWidth: 0,
    };
        var Sui = {
            label: 'Tỷ lệ Sủi',
            data: Sui,
            backgroundColor: 'rgb(228, 129, 27)',
            borderWidth: 0,
        };
        var OPC = {
            label: 'Tỷ lệ OPC',
            data: OPC,
        backgroundColor: 'rgb(157, 230, 41)',
        borderWidth: 0,
    };

    var Phien = {
        label: 'Tỷ lệ Phiến',
        data: Phien,
        backgroundColor: 'rgb(41, 224, 230)',
        borderWidth: 0,
    };

    var datasetvalues = {
        labels: ["XNK-KDQT-TH", "Cần Thơ", "Đà Nẵng", "Hà Nội", "Miền Đông", "Nghệ An","Nha Trang", "Tiền Giang", "Hồ Chí Minh", "Vũng Tàu"],//x-axis label values
        datasets: [OPC, Con, Sui, Phien, Tyle25]//y-axis
    };

    var chartOptions = {
        scales: {
            xAxes: [{
                barThickness: 10,
                barPercentage: 0.2,//Percent (0-1) of the available width each bar should
                categoryPercentage: 0.3,//Percent (0-1) of the available width each category

            }],
            yAxes: [{
                barPercentage: 1,
                categoryPercentage: 0.6,
                ticks: {
                    beginAtZero: true
                }
            }],
        }

    };

    var barChart = new Chart(barCanvas, {
        type: 'bar',
        data: datasetvalues,
        options: chartOptions
    });

    </script>
    <script>
        $(document).ready(function () {
            calculateTotal();

            function calculateTotal() {
                var totalColumns = {};

                $('#example tbody tr:not(#total-row)').each(function () {
                    var cells = $(this).find('td');

                    cells.each(function (index) {
                        if (index === 0 || index === cells.length - 1) {
                            return; // Bỏ qua cột đầu tiên (tên đơn vị) và cột cuối cùng (Tổng Thực Hiện)
                        }

                        var columnValue = parseFloat($(this).text().replace(/,/g, ''));
                        var isRatioColumn = index % 3 === 0; // Kiểm tra nếu đây là cột tỷ lệ

                        if (!isNaN(columnValue)) {
                            if (!totalColumns[index]) {
                                totalColumns[index] = {
                                    sum: 0,
                                    count: 0,
                                    isRatio: isRatioColumn,
                                };
                            }
                            totalColumns[index].sum += columnValue;
                            totalColumns[index].count++;
                        }
                    });
                });

                // Tính tỷ lệ và hiển thị tổng trong hàng tổng cộng
                $.each(totalColumns, function (index, value) {
                    var totalCell = $('#total-row td').eq(index);
                    if (!value.isRatio) {
                        totalCell.text(formatCurrency(value.sum));
                    } else {
                        totalCell.text(''); // Đặt giá trị rỗng cho cột tỷ lệ
                    }
                });
            }

            function formatCurrency(number) {
                return number.toLocaleString('en-US', { style: 'currency', currency: 'VND' }).replace('₫', '');
            }
        });</script>
    <script>
        $(document).ready(function () {
            calculateThucHienTotal();

            function calculateThucHienTotal() {
                var totalThucHien = 0;
                var totalThucHienIndex = 17; // Chỉ số cột Tổng Thực Hiện (số thứ tự cột, bắt đầu từ 0)

                $('#example tbody tr:not(#total-row)').each(function () {
                    var thucHienValue = parseFloat($(this).find('td').eq(totalThucHienIndex).text().replace(/,/g, ''));
                    if (!isNaN(thucHienValue)) {
                        totalThucHien += thucHienValue;
                    }
                });

                var totalCell = $('#total-row td.total-thuchien');
                totalCell.text(formatNumber(totalThucHien));
            }

            function formatNumber(number) {
                return number.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 });
            }
        });</script>
    <script>
        $(document).ready(function () {
            calculateThucHienTotal();

            function calculateThucHienTotal() {
                var totalThucHien = 0;
                var totalThucHienIndex = 18; // Chỉ số cột Tổng Thực Hiện (số thứ tự cột, bắt đầu từ 0)

                $('#example tbody tr:not(#total-row)').each(function () {
                    var thucHienValue = parseFloat($(this).find('td').eq(totalThucHienIndex).text().replace(/,/g, ''));
                    if (!isNaN(thucHienValue)) {
                        totalThucHien += thucHienValue;
                    }
                });

                var totalCell = $('#total-row td.total-tongKhoan');
                totalCell.text(formatNumber(totalThucHien));
            }

            function formatNumber(number) {
                return number.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 });
            }
        });</script> @*<script>$(document).ready(function () {
            calculateComboTotal();

            function calculateComboTotal() {
                var totalCombo = 0;

                $('#example tbody tr:not(#total-row)').each(function () {
                    var comboValue = parseFloat($(this).find('td.total-doanhthu-combo').text().replace(/,/g, ''));
                    if (!isNaN(comboValue)) {
                        totalCombo += comboValue;
                    }
                });

                var totalCell = $('#total-row td.total-combo');
                totalCell.text(formatNumber(totalCombo));
            }

            function formatNumber(number) {
                return number.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 });
            }
        });</script>*@



        <script>
            $(document).ready(function () {
                calculateKhoanRatio();

                function calculateKhoanRatio() {
                    var totalThucHien = parseFloat($('#total-row td.total-thuchien').text().replace(/,/g, ''));
                    var totalKhoan = parseFloat($('#total-row td.total-tongKhoan').text().replace(/,/g, ''));

                    var ratioKhoan = totalKhoan !== 0 ? totalThucHien / totalKhoan : 0;

                    var ratioCell = $('#total-row td.total-tyle');
                    ratioCell.text(formatRatio(ratioKhoan));
                }

                function formatRatio(ratio) {
                    return (ratio * 100).toFixed(2) + "%";
                }
            });</script>

        <script>
            //tinh ty le
            $(document).ready(function () {
                calculateRatios();

                function calculateRatios() {
                    var totalColumns = {};

                    // Lấy giá trị cột tổng doanh thu và cột tổng khoản
                    var sumDoanhThuOpc = parseFloat($('#total-row td.total-doanhthu-opc').text().replace(/,/g, ''));
                    var sumKhoanOpc = parseFloat($('#total-row td.total-khoan-opc').text().replace(/,/g, ''));
                    var sumDoanhThuCon = parseFloat($('#total-row td.total-doanhthu-con').text().replace(/,/g, ''));
                    var sumKhoanCon = parseFloat($('#total-row td.total-khoan-con').text().replace(/,/g, ''));
                    var sumDoanhThuSui = parseFloat($('#total-row td.total-doanhthu-sui').text().replace(/,/g, ''));
                    var sumKhoanSui = parseFloat($('#total-row td.total-khoan-sui').text().replace(/,/g, ''));
                    var sumDoanhThuPhien = parseFloat($('#total-row td.total-doanhthu-phien').text().replace(/,/g, ''));
                    var sumKhoanPhien = parseFloat($('#total-row td.total-khoan-phien').text().replace(/,/g, ''));
                    var sumDoanhThu25 = parseFloat($('#total-row td.total-doanhthu-25').text().replace(/,/g, ''));
                    var sumKhoan25 = parseFloat($('#total-row td.total-khoan-25').text().replace(/,/g, ''));
                    var sumThucHien = parseFloat($('#total-row td.total-thuchien').text().replace(/,/g, ''));
                    var sumTongkhoan = parseFloat($('#total-row td.total-tongKhoan').text().replace(/,/g, ''));
                    // Tính tỷ lệ theo từng loại
                    var ratioOpc = sumKhoanOpc !== 0 ? sumDoanhThuOpc / sumKhoanOpc : 0;
                    var ratioCon = sumKhoanCon !== 0 ? sumDoanhThuCon / sumKhoanCon : 0;
                    var ratioSui = sumKhoanSui !== 0 ? sumDoanhThuSui / sumKhoanSui : 0;
                    var ratioPhien = sumKhoanPhien !== 0 ? sumDoanhThuPhien / sumKhoanPhien : 0;
                    var ratio25 = sumKhoan25 !== 0 ? sumDoanhThu25 / sumKhoan25 : 0;

                    // Gán kết quả lên các ô tương ứng trong cột tỷ lệ
                    $('#total-row td.total-tyle-opc').text(formatRatio(ratioOpc));
                    $('#total-row td.total-tyle-con').text(formatRatio(ratioCon));
                    $('#total-row td.total-tyle-sui').text(formatRatio(ratioSui));
                    $('#total-row td.total-tyle-phien').text(formatRatio(ratioPhien));
                    $('#total-row td.total-tyle-25').text(formatRatio(ratio25));
                    $('#total-row td.total-thuchien').text(formatNumber(sumThucHien));
                    /*       $('#total-row td.total-tongKhoan').text(formatNumber(sumTongkhoan));*/
                    /*   $('#total-row td.total-tyle').text(formatRatio(ratioKhoan));*/
                }
                function formatNumber(number) {
                    return number.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 });
                }
                function formatRatio(ratio) {
                    return (ratio * 100).toFixed(2) + "%";
                }

            });</script>


        <script>
            window.onload = function () {
                var chartData = [];

                var rows = document.querySelectorAll("#example tbody tr");
                var totalKhoan = 0;
                var totalThucHien = 0;

                // Duyệt qua các hàng trừ hàng cuối cùng để tính tổng tổng khoán và tổng thực hiện
                for (var i = 0; i < rows.length; i++) {
                    var khoan = parseFloat(rows[i].cells[2].textContent.replace(/\,/g, ""));
                    totalKhoan += khoan;

                    var thucHien = parseFloat(rows[i].cells[1].textContent.replace(/\,/g, ""));
                    totalThucHien += thucHien;
                }

                // Tính tỷ lệ cho các phần đã thực hiện
                rows.forEach(function (row) {
                    var label = row.cells[0].textContent.trim();
                    var thucHien = parseFloat(row.cells[1].textContent.replace(/\,/g, ""));

                    var tyLe = ((thucHien / totalKhoan) * 100).toFixed(2); // Làm tròn tỷ lệ

                    chartData.push({ label: label, y: parseFloat(tyLe) });
                });

                // Tính tỷ lệ cho phần "Còn lại"
                var remainingRatio = 100 - chartData.reduce((total, data) => total + parseFloat(data.y), 0);

                // Thêm dữ liệu cho phần "Còn lại" vào biểu đồ
                chartData.push({ label: "Còn Lại", y: parseFloat(remainingRatio.toFixed(2)) });

                var chart = new CanvasJS.Chart("chartContainer", {
                    theme: "light1",
                    animationEnabled: true,
                    title: {
                        text: "TỶ TRỌNG ĐÓNG GÓP DOANH THU",
                        fontFamily: "Times New Roman",
                    },
                    chart: {
                        backgroundColor: "transparent"
                    },
                    data: [{
                        type: "pie",
                        startAngle: 180,
                        toolTipContent: "<b>{label}</b>: {y}%",
                        indexLabel: "{label} - {y}%",
                        dataPoints: chartData
                    }]
                });
                chart.render();
            }</script>
        @*<script>
                document.addEventListener("DOMContentLoaded", function () {
                    const tabControlTabs = document.querySelector(".tab-control .tabs");

                    // Lấy trạng thái hiện tại của view từ Local Storage
                    const currentView = localStorage.getItem("currentView");

                    // Lấy mảng tabsArray từ Local Storage
                    const tabsArray = JSON.parse(localStorage.getItem("tabsArray")) || [];

                    // Lặp qua từng phần tử trong tabsArray để tạo tab
                    tabsArray.forEach(function (tabInfo, index) {
                        const tabTitle = tabInfo.title;
                        const tabHref = tabInfo.href;

                        // Tạo tab và thêm vào giao diện
                        const newTab = document.createElement("li");
                        newTab.classList.add("tab", "selected");
                        newTab.innerHTML = `
                                                                                <a href="${tabHref}">${tabTitle}</a>
                                                                                <a class="closeTab" href="">✕</a>
                                                                            `;
                        tabControlTabs.appendChild(newTab);

                        // Sự kiện khi người dùng nhấp vào nút đóng tab
                        newTab.querySelector(".closeTab").addEventListener("click", function (event) {
                            event.preventDefault();
                            closeTabAndNavigate(tabTitle, index);
                        });
                    });

                    hideLoader();
                });

                // Hàm để xóa tab và chuyển đến view gần nhất (nếu có)
                // Hàm để xóa tab và cập nhật giao diện
                function closeTabAndNavigate(tabTitle, tabIndex) {
                    const tabsArray = JSON.parse(localStorage.getItem("tabsArray")) || [];

                    // Lọc ra tab cần đóng dựa trên chỉ số tabIndex và cập nhật lại tabsArray
                    if (tabIndex >= 0 && tabIndex < tabsArray.length) {
                        tabsArray.splice(tabIndex, 1);
                        localStorage.setItem("tabsArray", JSON.stringify(tabsArray));
                    }

                    // Xóa tab khỏi giao diện và cập nhật lại thanh tab
                    const tabControlTabs = document.querySelector(".tab-control .tabs");

                    // Lặp qua danh sách tab để tìm tab cần xóa
                    for (let i = 0; i < tabControlTabs.children.length; i++) {
                        const tab = tabControlTabs.children[i];
                        if (tab.querySelector("a").textContent === tabTitle) {
                            tab.remove();
                            break;
                        }
                    }

                    // Gọi lại hàm để tạo lại giao diện tab từ mảng đã được cập nhật
                    createTabsFromLocalStorage();

                    // Kiểm tra nếu không còn tab nào, chuyển về trang Home
                    if (tabsArray.length === 0) {
                        window.location.href = "/Home/About"; // Thay đổi dấu "#" thành đường dẫn tới trang Home nếu có
                    } else {
                        // Nếu còn tab, chuyển về tab cuối cùng trong danh sách
                        const lastTab = tabsArray[tabsArray.length - 1];

                        window.location.href = lastTab.href;
                    }
                }

            </script>
            <script>
                document.addEventListener("DOMContentLoaded", function () {
                    const tabControlTabs = document.querySelector(".tab-control .tabs");

                    // Lấy đường dẫn hiện tại của view
                    const currentViewHref = window.location.href;
                    console.log("Href là:", window.location.href);

                    // Lấy mảng tabsArray từ Local Storage
                    let tabsArray = JSON.parse(localStorage.getItem("tabsArray")) || [];

                    // Kiểm tra xem có ít nhất một tab trong mảng tabsArray
                    if (tabsArray.length > 0) {
                        // Lấy tab mới nhất từ mảng tabsArray
                        const newestTab = tabsArray[tabsArray.length - 1];

                        // Cập nhật đường dẫn href của tab mới nhất
                        newestTab.href = window.location.href;

                        // Cập nhật đường dẫn href của tab trong giao diện
                        const tabElement = tabControlTabs.querySelector(`[data-tab-title="${newestTab.title}"]`);
                        if (tabElement) {
                            tabElement.querySelector("a").setAttribute("href", window.location.href);
                        }

                        // Lưu lại tabsArray đã được cập nhật vào Local Storage
                        localStorage.setItem("tabsArray", JSON.stringify(tabsArray));
                    }

                    hideLoader();
                });
            </script>
            <script>
                document.addEventListener("DOMContentLoaded", function () {
                    // Lấy đường dẫn hiện tại của view
                    const currentViewHref = window.location.href;
                    console.log("Href là:", window.location.href);

                    // Lấy mảng tabsArray từ Local Storage
                    let tabsArray = JSON.parse(localStorage.getItem("tabsArray")) || [];

                    // Khai báo index của tab cần cập nhật
                    const tabIndexToUpdate = 1; // Thay đổi số này để chọn vị trí index cụ thể

                    // Kiểm tra xem tabIndexToUpdate có hợp lệ trong mảng không
                    if (tabIndexToUpdate >= 0 && tabIndexToUpdate < tabsArray.length) {
                        // Cập nhật đường dẫn href của tab tại vị trí index đã chọn
                        tabsArray[tabIndexToUpdate].href = currentViewHref;

                        // Lưu lại tabsArray đã được cập nhật vào Local Storage
                        localStorage.setItem("tabsArray", JSON.stringify(tabsArray));
                    }

                    hideLoader();
                });
            </script>
            <script>
                // Lấy đường dẫn hiện tại của trang web
                const currentViewHref = window.location.href;

                // Lấy mảng tabsArray từ Local Storage
                let tabsArray = JSON.parse(localStorage.getItem("tabsArray")) || [];

                let tabIndex = -1; // Khởi tạo vị trí index mặc định là -1

                // Duyệt qua mảng tabsArray để tìm vị trí index của tab có href trùng với đường dẫn hiện tại
                for (let i = 0; i < tabsArray.length; i++) {
                    if (tabsArray[i].href === currentViewHref) {
                        tabIndex = i;
                        break; // Khi tìm thấy tab thì thoát khỏi vòng lặp
                    }
                }

                // Kiểm tra vị trí index của tab
                if (tabIndex !== -1) {
                    // Cập nhật đường dẫn href của tab có vị trí index tìm thấy
                    tabsArray[tabIndex].href = currentViewHref;
                    localStorage.setItem("tabsArray", JSON.stringify(tabsArray)); // Lưu lại mảng đã được cập nhật vào Local Storage
                    console.log("Đã cập nhật đường dẫn href cho tab có vị trí index " + tabIndex);
                } else {
                    console.log("Không tìm thấy tab có href trùng với đường dẫn hiện tại.");
                }

            </script>
            <script>
                document.addEventListener("DOMContentLoaded", function () {
                    const tabControlTabs = document.querySelector(".tab-control .tabs");

                    // Lấy tất cả các tab
                    const tabs = tabControlTabs.querySelectorAll(".tab");

                    // Xử lý sự kiện khi người dùng click vào một tab
                    tabs.forEach(function (tab) {
                        tab.addEventListener("click", function (event) {
                            // Lấy tên của tab được click
                            const tabTitle = tab.querySelector("a").textContent;

                            // Cập nhật biến selected bằng tên của tab
                            selected = tabTitle;

                            // Lưu giá trị mới vào Local Storage
                            localStorage.setItem("selected", selected);

                            // Cập nhật màu sắc hoặc thực hiện các hành động khác dựa trên giá trị mới của selected
                            // Ví dụ: Đổi màu tab đã chọn
                            tabs.forEach(function (otherTab) {
                                otherTab.classList.remove("selected-tab");
                            });
                            tab.classList.add("selected-tab");

                            // Đối với các tác vụ khác bạn muốn thực hiện khi tab được chọn, hãy thêm mã vào đây.

                            // ...
                        });
                    });

                    // Nếu có giá trị selected trong Local Storage, cập nhật giao diện dựa trên giá trị đó
                    if (selected) {
                        tabs.forEach(function (tab) {
                            if (tab.querySelector("a").textContent === selected) {
                                tab.classList.add("selected-tab");
                            }
                        });
                    }

                    hideLoader();
                });

            </script>
            <script>
                document.addEventListener("DOMContentLoaded", function () {
                    // Lấy giá trị selected từ Local Storage
                    const selected = localStorage.getItem("selected");

                    // Lấy tất cả các tab
                    const tabs = document.querySelectorAll(".tab");

                    // Lặp qua tất cả các tab và kiểm tra nếu có tab có title bằng với giá trị selected
                    tabs.forEach(function (tab) {
                        const tabTitle = tab.querySelector("a").textContent;
                        if (tabTitle === selected) {
                            // Đổi màu cho tab này
                            tab.classList.add("selected-tab");
                        }
                    });
                });

            </script>
            <script>
                subMenuLinks.forEach(function (subMenuLink) {
                    subMenuLink.addEventListener("click", function (event) {
                        event.preventDefault();

                        const tabTitle = subMenuLink.textContent;
                        const subMenuLinkHref = subMenuLink.getAttribute("href");

                        // Cập nhật biến selected với giá trị của tabTitle
                        localStorage.setItem("selected", tabTitle);
                        console.log("selected:", tabTitle); // Thêm log để kiểm tra giá trị của selected

                        // Kiểm tra xem tab đã tồn tại trong mảng hay chưa
                        const tabExists = tabsArray.some(tab => tab.title === tabTitle);

                        // Nếu tab chưa tồn tại, thêm nó vào mảng
                        if (!tabExists) {
                            tabsArray.push({ title: tabTitle, href: subMenuLinkHref });
                            localStorage.setItem("tabsArray", JSON.stringify(tabsArray));
                        }

                        // Thêm tab vào giao diện
                        const newTab = document.createElement("li");
                        newTab.classList.add("tab", "selected");
                        newTab.innerHTML = `
                                                        <a href="${subMenuLinkHref}">${tabTitle}</a>
                                                        <a class="closeTab" href="">✕</a>
                                                    `;
                        tabControlTabs.appendChild(newTab);

                        // Chuyển view tới thẻ li tương ứng
                        if (subMenuLinkHref) {
                            // Lưu trạng thái hiện tại vào Local Storage trước khi chuyển trang
                            localStorage.setItem("currentTabView1", tabTitle);
                            localStorage.setItem("currentTabHrefView1", subMenuLinkHref);
                            window.location.href = subMenuLinkHref;
                        }
                    });
                });

            </script>
            <script>
                subMenuLinks.forEach(function (subMenuLink) {
                    subMenuLink.addEventListener("click", function (event) {
                        event.preventDefault();

                        const tabTitle = subMenuLink.textContent;
                        const subMenuLinkHref = subMenuLink.getAttribute("href");

                        // Kiểm tra xem tabTitle có trùng với selected không
                        const selected = localStorage.getItem("selected");
                        if (selected === tabTitle) {
                            // Nếu trùng, không làm gì cả và thoát khỏi sự kiện click
                            return;
                        }

                        // Cập nhật biến selected với giá trị của tabTitle
                        localStorage.setItem("selected", tabTitle);
                        console.log("selected:", tabTitle);

                        // Kiểm tra xem tab đã tồn tại trong mảng hay chưa
                        const tabExists = tabsArray.some(tab => tab.title === tabTitle);

                        // Nếu tab chưa tồn tại, thêm nó vào mảng
                        if (!tabExists) {
                            tabsArray.push({ title: tabTitle, href: subMenuLinkHref });
                            localStorage.setItem("tabsArray", JSON.stringify(tabsArray));
                        }

                        // Thêm tab vào giao diện
                        const newTab = document.createElement("li");
                        newTab.classList.add("tab", "selected");
                        newTab.innerHTML = `
                                                <a href="${subMenuLinkHref}">${tabTitle}</a>
                                                <a class="closeTab" href="">✕</a>
                                            `;
                        tabControlTabs.appendChild(newTab);

                        // Chuyển view tới thẻ li tương ứng
                        if (subMenuLinkHref) {
                            // Lưu trạng thái hiện tại vào Local Storage trước khi chuyển trang
                            localStorage.setItem("currentTabView1", tabTitle);
                            localStorage.setItem("currentTabHrefView1", subMenuLinkHref);
                            window.location.href = subMenuLinkHref;
                        }
                    });
                });

            </script>*@
    </body>

</html> 